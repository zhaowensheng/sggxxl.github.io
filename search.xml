<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>做Typora入门（中文版）)</title>
      <link href="/2018/11/27/zuo-typora-ru-men-zhong-wen-ban/"/>
      <url>/2018/11/27/zuo-typora-ru-men-zhong-wen-ban/</url>
      
        <content type="html"><![CDATA[<p>写Markdown费事？Typora让你像写word一样行云流水，所见即所得。</p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/" target="_blank" rel="noopener">GitHub Flavored Markdown</a>。</li></ul><iframe height="360" width="640" src="https://www.typora.io/img/beta.mp4" frameborder="0" allowfullscreen></iframe><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>Typora<a href="https://www.typora.io/#download" target="_blank" rel="noopener">下载</a>。</p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>加粗： <code>Ctrl/Cmd + B</code></li><li>标题： <code>Ctrl/Cmd + H</code></li><li>插入链接： <code>Ctrl/Cmd + K</code></li><li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li><li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li><li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li><li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li><li>撤销： <code>Ctrl/Cmd + Z</code></li><li>一级标题：快捷键为Crtl + 1，以此类推</li></ul><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><h4 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h4><p>在markdown中，段落由多个空格分隔。在Typora中，只需回车即可创建新段落。</p><h4 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h4><blockquote><p># 一级标题， 快捷键为Crtl + 1<br>## 二级标题，快捷键为Crtl + 2<br>###### 六级标题，快捷键为Crtl + 6</p></blockquote><h4 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h4><blockquote><p>> + 空格 + 引用文字</p></blockquote><h4 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h4><p>输入 <em>列表内容 将创建一个无序列表，该</em>符号可以替换为+或-。</p><p>输入1. 列表内容 将创建一个有序列表，其markdown源代码如下：</p><blockquote><p>无序列表<br>* AA<br>* BB<br>* CC</p><p>有序列表</p><ol><li>AA</li><li>BB</li><li>CC</li></ol></blockquote><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><blockquote><p>- [ ] 不勾选<br>- [x] 勾选</p></blockquote><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>在Typora中输入””” + 回车，并在后面选择一个语言名称即可语法高亮。</p><blockquote><p>语法高亮:</p><pre><code>&gt; def helloWorld():&gt;     print &#39;hello, world&#39;&gt; \</code></pre></blockquote><h4 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h4><p>输入<code>$$</code>，然后按“回车”键，如下：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><blockquote><p>\$$<br>\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>\$$</p></blockquote><h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>输入<code>| 表头1 | 表头2 |</code>并回车。即可将创建一个包含两列的表，然后就像操作Word文档一样设置表格即可，没必要知道Markdown的复杂语法，因为这些语法会由Typora自动生成。效果如下：</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td></td></tr></tbody></table><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><blockquote><p>你可以创建一个脚注，像这样<a href="这是上面的注释内容。">^1</a>.</p></blockquote><p>你可以创建一个脚注，像这样<a href="https://www.simon96.online/2018/10/18/Typora%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89/%E8%BF%99%E6%98%AF%E4%B8%8A%E9%9D%A2%E7%9A%84%E6%B3%A8%E9%87%8A%E5%86%85%E5%AE%B9%E3%80%82" target="_blank" rel="noopener">^1</a>.</p><p>注意：该例子脚注标识是1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。</p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>输入<code>***</code>或<code>---</code> 再按回车即可绘制一条水平线，如下：</p><hr><h4 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h4><p>Typora支持<a href="http://jekyllrb.com/docs/frontmatter/" target="_blank" rel="noopener">YAML Front Matter</a>， 在文章开头输入<code>---</code>，然后按回车即可。</p><h4 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h4><p>输入<code>[toc]</code>然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><h3 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h3><p>跨度元素即图片，网址，视频等，在Typora中输入后，会立即载入并呈现。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h5><blockquote><p>这是一个带有标题属性的<a href="http://example.com/&gt; “标题”" target="_blank" rel="noopener">链接</a>.<br>这是一个没有标题属性的<a href="http://example.net/" target="_blank" rel="noopener">链接</a>&gt;.</p></blockquote><p>效果如下：</p><p>这是一个带有标题属性的<a href="http://example.com/" target="_blank" rel="noopener">链接</a>.<br>这是一个没有标题属性的<a href="http://example.net/" target="_blank" rel="noopener">链接</a>.</p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><blockquote><p>这是一个[参考链接]<a href="http://example.com/" target="_blank" rel="noopener">id</a>。<br>[id]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “标题”</p></blockquote><p>这是一个<a href="http://example.com/" target="_blank" rel="noopener">参考链接</a>。</p><h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><p>Typora允许用&lt;括号括起来&gt;, 把URL作为链接插入。输入[<a href="mailto:td_simon@outlook.com" target="_blank" rel="noopener">td_simon@outlook.com</a>](mailto:<a href="mailto:td_simon@outlook.com" target="_blank" rel="noopener">td_simon@outlook.com</a>) 即 <a href="mailto:td_simon@outlook.com" target="_blank" rel="noopener">td_simon@outlook.com</a>。<br>Typora还会自动链接标准网址。例如：<a href="http://www.simon96.online./" target="_blank" rel="noopener">www.simon96.online。</a></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><blockquote><p><img src="/path/to/img.jpg" alt="显示的文字"><br><img src="/path/to/img.jpg" alt="显示的文字" title="图片标题"></p></blockquote><h4 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h4><pre><code>&gt; *单个星号*&gt; _单下划线_</code></pre><p>效果如下：<br><em>单个星号</em></p><p><em>单下划线</em></p><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><pre><code>&gt; *两个星号*&gt; _双下划线_</code></pre><p>效果如下：<br><strong>两个星号</strong><br><strong>双下划线</strong></p><h4 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h4><p>标记代码使用反引号，即在英文输入法下，ESC键下面和1键左边的符号——</p><p>使用该<code>printf()</code>功能。<br>效果如下：<br>使用该<code>printf()</code>功能。</p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><blockquote><p><code>~~删除线~~</code></p></blockquote><p>效果如下：</p><p><del>删除线</del></p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>\<u>\下划线</u></p><p>效果如下：</p><p><u>\下划线</u></p><h4 id="表情符号-smile"><a href="#表情符号-smile" class="headerlink" title="表情符号:smile:"></a>表情符号:smile:</h4><blockquote><p>：smile ：（注意为：是英文的冒号）</p></blockquote><p>:smile:</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p>H~2~O (需在设置中打开该功能)</p><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><p>X^2^(需在设置中打开该功能)</p><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><p>==高亮==(需在设置中打开该功能)</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>支持HTML</p><h4 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h4><p>支持iframe-based嵌入代码，</p><blockquote><p>&lt; iframe height=’265’ scrolling=’no’ title=’Fancy Animated SVG Menu’ src=’<a href="http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2%27" target="_blank" rel="noopener">http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2’</a> frameborder=’no’ allowtransparency=’true’ allowfullscreen=’true’ style=’width: 100%;’&gt;</p></blockquote><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><blockquote><p>&lt; video src=”xxx.mp4” /&gt;</p></blockquote><hr><p><strong>总结：</strong></p><ol><li>建议打开大纲视图（快捷键ctrl + shift + 1）。</li><li>插入表格需要顶格写，不然显示不出来。</li><li>以上语法不用刻意记，在Typora中的右键菜单都有， 常用功能基本上都有快捷键。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>做一个好前端必须要知道的事——JS语言</title>
      <link href="/2018/11/27/zuo-yi-ge-hao-qian-duan-bi-xu-yao-zhi-dao-de-shi-js-yu-yan/"/>
      <url>/2018/11/27/zuo-yi-ge-hao-qian-duan-bi-xu-yao-zhi-dao-de-shi-js-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="做一个好前端必须要知道的事——JS语言"><a href="#做一个好前端必须要知道的事——JS语言" class="headerlink" title="做一个好前端必须要知道的事——JS语言"></a>做一个好前端必须要知道的事——JS语言</h1><p>编程语言按各种方法可以分为各种类型，现在让我们来看看JS属于什么类型语言</p><h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><p>按编译执行过程，可以分为编译型语言和解释型语言。比如</p><ul><li>c 语言，必须先经过编译生成目标文件，然后链接各个目标文件和库文件，生成可执行文件。</li><li>Java、scala 则是先编译成字节码，然后解释执行字节码（可以理解为编译型语言也可以理解为解释型语言）。准确的理解，java 是编译型语言，源代码整个编译成字节码，java 字节码，是解释型语言。</li><li>Python 是解释型语言，不过也可以先进行编译，编译成 python 的字节码。</li><li>Javascript 是解释型语言。目前貌似还没有直接将 js 整个编译然后才执行（有说法是 js 动态性太强，先整体编译难度太大，执行性能不如解释执行高）。</li></ul><p>⚠️注意：解释型语言也是需要编译的。区分编译型语言和解释型语言，是看源代码是否整个编译成目标代码然后执行还是编译一段执行一段。<br>对于传统编译型语言来说，编译步骤分为：词法分析、语法分析、语义检查、代码优化和字节生成。<br>但对于解释型语言来说，通过词法分析和语法分析得到语法树后，就可以开始解释执行了（根据语法树和符号表生成机器码）。<br>这也就解释了为什么都说 js 是解释执行的，读一句执行一句，但是实际上 js 中还没执行到的代码语法错误导致整个 js 不会执行的问题。例如：</p><pre class=" language-bash"><code class="language-bash">console.log<span class="token punctuation">(</span><span class="token string">'不会被console出来'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">=</span> // 这里的语法错误导致了上面的代码也不会执行</code></pre><p>其实js变量提升的现象也很明显的证明了js是先编译而后执行的<br>在浏览器中，多个&lsaquo;script&rsaquo;标签中的 js 代码，是分段编译的（所以，某一个&lsaquo;script&rsaquo;标签中的语法错误不会导致另一个&lsaquo;script&rsaquo;中的代码不执行）但是全局对象是共享的。</p><h2 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h2><p>按语言按变量的类型在编译时确定还是运行时确定可以分为静态语言和动态语言。比如</p><ul><li>java，String s = null; 变量 s 的类型在编译时就可以确定为字符串类型。</li><li>python，变量不需要声明，变量的类型在第一次赋值时由值的类型确定。</li><li>js，let val;let = ‘1’; 变量 val 在运行 val=’1’时才能确定为字符串类型。</li></ul><h2 id="弱类型语言"><a href="#弱类型语言" class="headerlink" title="弱类型语言"></a>弱类型语言</h2><p>按变量的类型是否在运行时可以改变分为强类型语言和弱类型语言。比如</p><ul><li>Java、scala 是强类型语言，变量一旦声明，它的类型以后不能被改变。</li><li>Python 是强类型语言。</li><li>Js 是弱类型语言。比如 let v = ‘1’;v=1;v=true;这在 js 中是合法的。</li></ul><h2 id="非常灵活的语言"><a href="#非常灵活的语言" class="headerlink" title="非常灵活的语言"></a>非常灵活的语言</h2><p>按语言范式可以分为声明式、命令式、函数式语言。</p><ul><li>声明式编程，告诉计算机我要做什么，而不是如何做。在更高层面写代码，更关心的是目标，而不是底层算法实现的过程。例如 css, 正则表达式，sql 语句，html, xml…</li><li>命令式编程，告诉计算机如何做，而不管我想要做什么。解决某一问题的具体算法实现。例如 java、c。</li><li>函数式编程，将计算机运算看做是数学中函数的计算，并且避免了状态以及变量的概念。</li><li>很多语言并不是单纯的支持某一种范式，像 java8 也添加了部分对函数式的支持。 </li><li>js 是一个非常灵活的语言，支持命令式和函数式编程。</li></ul><h2 id="各种类型语言的优缺点"><a href="#各种类型语言的优缺点" class="headerlink" title="各种类型语言的优缺点"></a>各种类型语言的优缺点</h2><ul><li>一般编译型语言性能比解释型语言高。但是由于编译型语言需要先进行编译。</li><li>解释型语言的好处是，部署到线上的是源代码，可以直接修改线上环境的代码，解决一些 bug。比如我们有时候直接修改线上的 js 代码。</li><li>编译型语言通常会用 xml 做配置文件，因为我们通常不会改编译后的字节码。解释型语言的配置，直接写在源代码里更方便，用 xml 做配置就显得多余。</li><li>静态语言，有利于编译时检查。比如 java、在 ide 中为对象的一个不存在的属性赋值能在编译时检查出错误。</li><li>Js 是动态语言。对象的某个属性是否存在，在编译时无法确定。这导致某些错误要到运行时才可能发现。所以一般 js 程序的正确性，更需要单元测试保证。</li><li>强类型语言由于类型在声明之后不允许改变，所以能实现编译时类型检查。动态语言和弱类型语言，则更灵活，实现相同功能的代码量通常更少或者更容易实现复杂功能。当然可读性可维护性方面不如静态语言和强类型语言。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>纯CSS打造银色MacBook Air（完整版）</title>
      <link href="/2018/11/26/chun-css-da-zao-yin-se-macbook-air-wan-zheng-ban/"/>
      <url>/2018/11/26/chun-css-da-zao-yin-se-macbook-air-wan-zheng-ban/</url>
      
        <content type="html"><![CDATA[<h2 id="纯CSS打造银色MacBook-Air（完整版）"><a href="#纯CSS打造银色MacBook-Air（完整版）" class="headerlink" title="纯CSS打造银色MacBook Air（完整版）"></a>纯CSS打造银色MacBook Air（完整版）</h2><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>前段时间自己用CSS绘制了一个银色的MacBook Air，今天把它从电脑硬盘深处挖了出来，我把我的思路和想法写下来和小伙伴们分享分享。先把最后的效果给大家。</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkAHI.jpg" alt="FAkAHI.jpg"></p><p>这其实是一个半成品，键盘上的其他图标和文字都还没有加，图标的话可以用font-face，待我找着合适的字体图标网址链接后给大家补全，同时也欢迎小伙伴们捣腾。</p><h2 id="零、第零步"><a href="#零、第零步" class="headerlink" title="零、第零步"></a>零、第零步</h2><p>这里使用了CSS的before、after伪元素、渐变gradient、阴影、nth-child选择器等相关内容，阴影和渐变效果从图片上可能看的不太清楚，小伙伴们可以去上面的Codepen上查看，文章的最后我会给出整个源代码，有兴趣的可以自己随意修改完善。</p><p>Ok，开始肆无忌惮地进入。</p><p>首先介绍一下绘制的结构。</p><p>对于键盘，就是建立了一个无序列表ul，然后写上若干个li即可，其他的用几个div包裹即可，先给出HTML结构：</p><pre><code>&lt;div class=&quot;board&quot;&gt;&lt;div class=&quot;blackbar&quot;&gt;&lt;/div&gt;&lt;div class=&quot;keyboard&quot;&gt;&lt;ul&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;touch&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>4个div加上2个伪元素，总共六个部分构成整个MacBook Air。board是MacBook Air的底座，blackbar是屏幕的那个黑色旋转轴，keyboard是键盘，touch是触控板；board:before是上面的盖子，border-bottom是盖子下面的那个黑色细长条。Ok，这六部分构成了整个MacBook Air。</p><p>没图我说个什么：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkkDA.jpg" alt="FAkkDA.jpg"></p><p>接下来，我按照我的绘制顺序一步步来介绍。口渴的小伙伴可以先去沏杯茶。</p><h2 id="一、第一步"><a href="#一、第一步" class="headerlink" title="一、第一步"></a>一、第一步</h2><p>先给出HTML，下面是一段很长很长但是却没什么研究价值的无序列表，让滚轮飞起来吧：</p><pre><code>&lt;div class=&quot;board&quot;&gt;&lt;div class=&quot;blackbar&quot;&gt;&lt;/div&gt;&lt;div class=&quot;keyboard&quot;&gt;&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;@&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;#&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;$&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;%&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;^&lt;/span&gt;&lt;span&gt;6&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;&amp;&lt;/span&gt;&lt;span&gt;7&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;*&lt;/span&gt;&lt;span&gt;8&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;9&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;—&lt;/span&gt;&lt;span&gt;-&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span&gt;+&lt;/span&gt;&lt;span&gt;=&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;Q&lt;/li&gt;&lt;li&gt;W&lt;/li&gt;&lt;li&gt;E&lt;/li&gt;&lt;li&gt;R&lt;/li&gt;&lt;li&gt;T&lt;/li&gt;&lt;li&gt;Y&lt;/li&gt;&lt;li&gt;U&lt;/li&gt;&lt;li&gt;I&lt;/li&gt;&lt;li&gt;O&lt;/li&gt;&lt;li&gt;P&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;A&lt;/li&gt;&lt;li&gt;S&lt;/li&gt;&lt;li&gt;D&lt;/li&gt;&lt;li&gt;F&lt;/li&gt;&lt;li&gt;G&lt;/li&gt;&lt;li&gt;H&lt;/li&gt;&lt;li&gt;J&lt;/li&gt;&lt;li&gt;K&lt;/li&gt;&lt;li&gt;L&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;Z&lt;/li&gt;&lt;li&gt;X&lt;/li&gt;&lt;li&gt;C&lt;/li&gt;&lt;li&gt;V&lt;/li&gt;&lt;li&gt;B&lt;/li&gt;&lt;li&gt;N&lt;/li&gt;&lt;li&gt;M&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;By Pure CSS.To Be Continued.&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div class=&quot;touch&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>键盘按键为若干个li，其中按键上有两个符号的我用两个span包了起来，像这样：</p><pre><code>&lt;li&gt;&lt;span&gt;!&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;/li&gt;</code></pre><p>因为它们最后式一上一下的69体位，用span包裹住便于分别布置它们的位置。</p><p>先绘制一个600&lowast;450的div，并将board居中，给一个银色的color，这里用的是rgb(210,210,210)，用border-radius绘制出四个20px的圆角，用box-shadow给出一个灰色的阴影，这里用的灰色是rgb(160,160,160)，小伙伴们可以自己选择合适的颜色，最后从div的左下角到右上角以60度添加一个线性渐变linear-gradient，是从白色开始从四分之一出过渡到灰色。因为之后的div会用到绝对定位，所以在此先把其父元素board定位为relative。</p><p>完整的代码及效果如下：</p><pre><code>.board{    margin: 0 auto;    padding: 0 auto;    width: 600px;    height: 450px;    margin-top: 50px;    background: rgb(210,210,210);    border-radius: 20px;    position: relative;    box-shadow: 0px 5px 6px rgb(160,160,160);    background:-webkit-linear-gradient(60deg,rgba(250,250,250,1) 25%,rgba(210,210,210,1));}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkFud.jpg" alt="FAkFud.jpg"></p><p>这样，一个有阴影和线性渐变过渡效果的面板就率先完成了。</p><h2 id="二、第二步"><a href="#二、第二步" class="headerlink" title="二、第二步"></a>二、第二步</h2><p>接下来我要画笔记本盖子，用的是伪元素board:before。</p><p>因为盖子是翻起来的，所以从上往下看是一个窄边。把board:before填充为780px&lowast;20px的div，背景颜色为灰色。</p><p>实现及效果如下：</p><pre><code>.board:before{    content: &#39;&#39;;    display: block;    width: 780px;    height: 20px;    background: rgb(210,210,210);}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkPjH.jpg" alt="FAkPjH.jpg"></p><p>然后调一下位置，board:before定位为绝对定位，board宽600px，盖子宽780px，所以left=-(780-600)/2=-90px，top为board:before的高20px，顺带做出一个大弧形的效果，水平半径取大一些，垂直半径取小一些，like this：</p><pre><code>border-top-left-radius: 390px 18px;border-top-right-radius: 390px 18px;</code></pre><p>此时的效果如下：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkCge.jpg" alt="FAkCge.jpg"></p><p>有那么个意思了，为了做出立体的效果，我们给盖子从上到下加个渐变的过渡效果：</p><pre><code>background:-webkit-linear-gradient(top,rgb(210,210,210) 50%,rgb(255,255,255));</code></pre><p>再顺带把屏幕下的那条小黑条加上，一句话很简单：</p><pre><code>border-bottom: 2px solid rgb(0,0,0);</code></pre><p>看看效果先：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkVEt.jpg" alt="FAkVEt.jpg"></p><p>有没有感觉某些地方有些违和？放大看一下这里：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAknC8.jpg" alt="FAknC8.jpg"></p><p>来个更加菊部的：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkZUP.jpg" alt="FAkZUP.jpg"></p><p>对，就是这个小角处，给点效果：</p><pre><code>border-bottom: 2px solid rgb(0,0,0);</code></pre><p>再看看效果：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAke4f.jpg" alt="FAke4f.jpg"></p><p>这样黑边那也有了小的光滑弧度过渡，显得更加自然。</p><p>附上这一步的完整代码和效果：</p><pre><code>.board:before{    content: &#39;&#39;;    display: block;    width: 780px;    height: 20px;    background: rgb(210,210,210);    border-radius: 0px 0px 3px 3px;    border-top-left-radius: 390px 18px;    border-top-right-radius: 390px 18px;    position: absolute;    top:-20px;     left: -90px;    border-bottom: 2px solid rgb(0,0,0);     background:-webkit-linear-gradient(top,rgb(210,210,210) 50%,rgb(255,255,255));}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkKgg.jpg" alt="FAkKgg.jpg"></p><h2 id="三、第三步"><a href="#三、第三步" class="headerlink" title="三、第三步"></a>三、第三步</h2><p>这一步我们来做屏幕旋转轴，也就是屏幕下方的那条黑色矩形blackbar。</p><p>同样先设置width和height，absolute定位，居中显示，移动的距离可以参考上面的方法小算一下就可以了，加上2px的圆角，为了显示出旋转轴立体的沟槽，我们给blackbar类的下边框和右边框加上2px的白色实线，同时给blackbar一个从上到下的渐变，中间显示出窄窄的亮丽的白色即可，颜色和过渡的位置小伙伴们可以自行了断，oops，是自行把握。</p><p>实现和效果：</p><pre><code>.blackbar{    width: 450px;    height: 18px;    position: absolute;     left: 75px;    border-radius: 2px;    border-bottom: 2px solid #ffffff; /* 小白边 */    border-right: 2px solid #ffffff;    background: -webkit-linear-gradient(top,rgb(30,30,30) ,rgb(60,60,60) 35%,rgb(100,100,100) 50%,rgb(30,30,30) 65%);    background: -linear-gradient(top,rgb(30,30,30) ,rgb(60,60,60) 35%,rgb(100,100,100) 50%,rgb(30,30,30) 65%);}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAku8S.jpg" alt="FAku8S.jpg"></p><h2 id="四、第四步"><a href="#四、第四步" class="headerlink" title="四、第四步"></a>四、第四步</h2><p>接下来就是MacBook Air最显眼的部分了，那就是键盘部分，为什么显眼呢，因为它占的地儿最大吧哈哈哈（不好笑的事也要大笑三声）。</p><p>在画键盘之前呢，小伙伴们最好先算好整个键盘区域的大小，各个按键的大小和排列，否则到时候只能一点点重新调，很麻烦。好了，咱先把键盘区域画下来吧。</p><p>传统步骤，设置宽高，绝对定位，然后设置left、top居中，勾勒出1px solid 颜色为rgb(180,180,180)的border，8px的圆角，白色的背景颜色；</p><p>实现和效果如下：</p><pre><code>.keyboard{    position: absolute;    width:530px;    height: 216px;    left: 35px;    top: 35px;    border: 1px solid rgb(180,180,180);    border-radius: 8px;    background:rgba(250,250,250,1);}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkMvQ.jpg" alt="FAkMvQ.jpg"></p><p>为了显示出立体的沟槽感，阴影又该出来了。我们用box-shadow给keyboard的四条边框添加四条内部inset阴影，关于box-shadow以后有机会再讲，先把实现和效果贴上：</p><pre><code>box-shadow:2px 0px 2px rgb(180,180,180) inset,0px 3px 3px rgb(180,180,180) inset,-5px -0px 1px rgb(255,255,255) inset,0px -3px 3px rgb(180,180,180) inset;</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkNCT.jpg" alt="FAkNCT.jpg"></p><p>雏形出来了，接下来就是一个个的nth-child了。让我们接着猛烈地荡起双桨吧。</p><h2 id="五、第五步"><a href="#五、第五步" class="headerlink" title="五、第五步"></a>五、第五步</h2><p>就像前面提到的，我们最好事先先计算好每个按键的大小和位置，做到心中有数，不至于到时候一片混乱，否则整个键盘就像东汉末年似的这一块儿那一块儿。</p><p>首先是一些常规的设置，去掉列表标志，margin、padding设置，列表的宽和高balabala，按照之前的计算，设置按键与按键的间距，大致排列下这么多个按键，并给按键添加4px的圆角，为了显示立体效果，加上一个border：</p><pre><code>border: 1px solid rgb(70,70,70);</code></pre><p>并四个边添加阴影：</p><pre><code>box-shadow: 1px 0px 0px rgb(0,0,0),0px 1px 0px rgb(0,0,0),-1px 0px 0px rgb(0,0,0),0px -1px 0px rgb(0,0,0);</code></pre><p>附上代码和效果:</p><pre><code>ul,li{    list-style: none;    margin:0 auto;    padding:0 auto;    display: block;    font-family: &quot;Vrinda&quot;;    -webkit-user-select: none;    -moz-user-select: none;    -ms-user-select: none;    user-select: none;}ul{    width:530px;    margin-top: 8px;    padding-left: 8px;    /* border:2px solid black; */}li{    width:29px;    height:29px;    float: left;    /* padding-left: 0px; */    margin-right: 5px;    margin-bottom: 5px;    background-color: rgb(30,30,30);    color: rgb(200,200,200);    text-align: center;    line-height: 28px;    font-size: 12px;    border-radius: 4px;    border: 1px solid rgb(70,70,70);    box-shadow: 1px 0px 0px rgb(0,0,0),    0px 1px 0px rgb(0,0,0),    -1px 0px 0px rgb(0,0,0),    0px -1px 0px rgb(0,0,0);}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkluj.jpg" alt="FAkluj.jpg"></p><p>看上去还很乱，连文本都溢出了，但是妈妈说过，心急吃不了热豆腐，慢慢来，保准等会就驯服得她服服帖帖的。</p><p>Tips：请用力记住父母的生日哦。</p><p>细心的小伙伴们会发现有一段代码，貌似不细心的也能发现，就是这段：</p><pre><code>-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;user-select: none;</code></pre><p>这是什么意思呢？先来看下不加这段代码的效果：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAk1Ds.jpg" alt="FAk1Ds.jpg"></p><p>对，就是这一片的蓝色，当用鼠标去键盘上拖着选中的时候，那一个个的li就会被选中，添加这段代码就能还我们一片巧克力键盘了，就能还我们一个洁白的蓝天了。</p><p>洁白…的…蓝天…^o^</p><p>我们先把键盘最上面的那一排功能键先捣腾好。这里我们用nth-child来选择上面那一排我没数错数量应该是14个的功能键，并给它们简单设置样式。</p><p>这里使用链式写法，实现和效果如下：</p><pre><code>li:nth-child(-n+14):nth-child(n+1){    width:30px;    height:15px;}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAk3bn.jpg" alt="FAk3bn.jpg"></p><p>接下来调整第二行的数字按键上的那些数字和符号的一上一下的69体位，同样先用nth-child选中再设置样式：</p><pre><code>li:nth-child(-n+27):nth-child(n+16) span,li:nth-child(40) span,li:nth-child(41) span,li:nth-child(42) span,    li:nth-child(53) span,li:nth-child(54) span,li:nth-child(-n+66):nth-child(n+64) span{    display: block;    margin-top: 5px;    line-height: 0.5; }</code></pre><p>然后设置除了最后的那四个方向键外的其他键的大小，很简单，算准写就行，要做一个心中有数的男人，这块直接贴代码：</p><pre><code>li:nth-child(28),li:nth-child(29){    width:45px;}li:nth-child(43),li:nth-child(55){    width:55px;}li:nth-child(56),li:nth-child(67){    width:73px;}    li:nth-child(-n+74):nth-child(n+68){    height:33px;}li:nth-child(72){    width:173px;}li:nth-child(71),li:nth-child(73){    width:37px;}</code></pre><p>找个驿站半路休息下先，顺带看下效果：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkGEq.jpg" alt="FAkGEq.jpg"></p><p>除了四个方向键，其他的按键放置得还算可以，接着走。</p><p>四个方向键设置也很简单，设置宽高，定位即可，不罗嗦了，直接上：</p><pre><code>li:nth-child(75),li:nth-child(77),li:nth-child(78){    margin-top: 18px;    height: 14px;}li:nth-child(76){    height: 13px;    margin-top: 19px;}li:nth-child(78){    position: absolute;    bottom: 22px;    right:38px;}</code></pre><p>效果：</p><p><img src="https://s1.ax1x.com/2018/11/26/FAkY5V.jpg" alt="FAkY5V.jpg"></p><p>恩，美感效果还在我的审美范围之内。</p><h2 id="六、第六步"><a href="#六、第六步" class="headerlink" title="六、第六步"></a>六、第六步</h2><p>最后一步就是触控板touch的绘制了，哈哈哈，终于要诺曼底登陆了，待我喝口菊花茶先。</p><p>触控板的绘制和键盘的绘制基本上是一样的，设置大小，定位，圆角，border即可。直接上：</p><pre><code>.touch{    position: absolute;    width:200px;    height:150px;    border: 2px solid rgb(190,190,190);    bottom: 23px;    left: 200px;    border-radius: 8px;}</code></pre><p><img src="https://s1.ax1x.com/2018/11/26/FAkJU0.jpg" alt="FAkJU0.jpg"></p><h2 id="七、小了个结"><a href="#七、小了个结" class="headerlink" title="七、小了个结"></a>七、小了个结</h2><p>到这里，MacBook Air就算完成了，还是那句话，是个半成品，一些字体图标还待用font-face来完成，当然还可以添加些动画，让它像产品旋转来展示等等，这只是抛砖引玉而已，期待小伙伴们更多奇思妙想。小伙伴们有好的想法欢迎分享~~~</p><p>源自：<a href="http://www.cnblogs.com/myvin/p/4621231.html" target="_blank" rel="noopener">www.cnblogs.com/myvin/p/4621231.html</a><br>声明：文章著作权归作者所有，如有侵权，请联系小编删除。<br>感谢 · 转发<br>欢迎大家留言</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML基础知识总结</title>
      <link href="/2018/11/22/html-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2018/11/22/html-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>经过这段时间的学习，对于html的一些基础知识有了一定的了解。所谓好记性不如烂笔头，唯有一点点累积，才能汇聚成知识的海洋。现在，我对这段时间的学习做一个总结。</p><h2 id="一、HTML的定义"><a href="#一、HTML的定义" class="headerlink" title="一、HTML的定义"></a>一、HTML的定义</h2><p>   HTML，超文本标记语言，写给浏览器的语言，目前网络上应用最广泛的语言。HTML也在不断的更新，最新版本已经出现了HTML5。在HTML5中出现了许多新特性，也遗弃了一些旧元素。我们写好html文件后，在浏览器中打开。主流的浏览器包括IE、Firefox、Chrome、Goole等。</p><h2 id="二、HTML标签元素"><a href="#二、HTML标签元素" class="headerlink" title="二、HTML标签元素"></a>二、HTML标签元素</h2><p>HTML元素由开始标签和结束标签组成。虽然现在我们还不知道具体标签代表的意思，但标签一定是这样的格式：有一对开始&lt;&gt;和结束&lt;/&gt;。一般标签名推荐用小写。标签具有属性，属性用来表示标签的特征。比如，我们用大小这个属性，来衡量一个苹果。所以，大小可以用来表示苹果的特征。属性时写在标签里面的，而且是开始标签内。</p><h2 id="三、HTML-的基本结构"><a href="#三、HTML-的基本结构" class="headerlink" title="三、HTML 的基本结构"></a>三、HTML 的基本结构</h2><p>结构由网页的头部和网页的身体组成。如下例子：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html<span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>这是我的博客<span class="token operator">&lt;</span>/title<span class="token operator">></span>    <span class="token operator">&lt;</span>/head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>      这是我的身体。    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><p>在上面的例子中，第一个标签<html>是告诉浏览器这是html文档的开始。Html文档的最后一个标签是</html>，是告诉浏览器这是html的终止。标签<head><meta name="generator" content="Hexo 3.8.0"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head>之间的文本是头部信息，在<title></title>之间的文本是文档标题，会显示在浏览器的窗口的标题栏。<body><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"model":{"jsonPath":"live2d-widget-model-haruto"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body>之间的文本是正文。</p><h2 id="四、规范的html页面"><a href="#四、规范的html页面" class="headerlink" title="四、规范的html页面"></a>四、规范的html页面</h2><h3 id="1、文档声明"><a href="#1、文档声明" class="headerlink" title="1、文档声明"></a>1、文档声明</h3><p>在<html>前，要写文档声明语句: &lt;!DOCTYPE HTML&gt;，当然也可以用小写表示。文档声明的作用是告诉浏览器该文档遵循html规范。</html></p><h3 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h3><p>一般情况下，我们都会设定html文档的标题。这样的作用是使用户看起来感觉友好。标签为<title></title>,标签内放标题名称。</p><h3 id="3、页面编码"><a href="#3、页面编码" class="headerlink" title="3、页面编码"></a>3、页面编码</h3><p>编码的种类有多种，但常用的是utf-8和gb2312。utf-8为多国语言编码，gb2312为中文简体编码。对于编码的详细问题，可以浏览博客。设置网页编码的语句为<meta charset="utf-8">，是在<head><meta name="generator" content="Hexo 3.8.0"></head>标签内定义的。</p><h3 id="4、页面关键字，内容"><a href="#4、页面关键字，内容" class="headerlink" title="4、页面关键字，内容"></a>4、页面关键字，内容</h3><p>我们可以在文档中设置一些关键词，内容介绍。这样的好处是，当我们的网页发布在网上，用户可以通过在搜索框中输入关键字，找出一些比较符合的网页。这样一来，我们的网页便可以更容易地被别人访问。</p><h2 id="五、常用元素"><a href="#五、常用元素" class="headerlink" title="五、常用元素"></a>五、常用元素</h2><h3 id="1、-换行符。"><a href="#1、-换行符。" class="headerlink" title="1、 换行符。"></a>1、 换行符。</h3><p>换行对于文本编辑来说是最正常不过的了。当文字写满一行，需要换行。或者根据需要，在文本中换行，这都是可以的。如下例子：</p><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>body<span class="token operator">></span>     我要换行<span class="token operator">&lt;</span>br /<span class="token operator">></span>换行后 <span class="token operator">&lt;</span>/body<span class="token operator">></span></code></pre><h3 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落 "></a>2、段落 <p></p></h3><p>在写文章时，我们可以用p标签来定义一个段落。如下定义了两个段落：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>p<span class="token operator">></span>UTF-8。UTF-8就是在互联网上使用最广的一种unicode的实现方式。<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>GBK编码，包括了GB2312中的编码，同时扩充了许多，通行于大陆。<span class="token operator">&lt;</span>/p<span class="token operator">></span></code></pre><p>在定义了段落后，可以利用属性align来对段落进行设置。属性align的值包括left（左对齐）、center（居中对齐）、right（右对齐）三种。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>p align<span class="token operator">=</span>“center”<span class="token operator">></span>UTF-8。UTF-8就是在互联网上使用最广的一种unicode的实现方式。         <span class="token operator">&lt;</span>/p<span class="token operator">></span></code></pre><img src="https://images2015.cnblogs.com/blog/808020/201608/808020-20160805113907997-148929216.png" class="[class names]"><h3 id="3、标题。标题有六种大小h后的数字越大，说明标题越大。分别为"><a href="#3、标题。标题有六种大小h后的数字越大，说明标题越大。分别为" class="headerlink" title="3、标题。标题有六种大小h后的数字越大，说明标题越大。分别为"></a>3、标题。标题有六种大小h后的数字越大，说明标题越大。分别为</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>h1<span class="token operator">></span>标题1<span class="token operator">&lt;</span>/h1<span class="token operator">></span>             <span class="token operator">&lt;</span>h2<span class="token operator">></span>标题2<span class="token operator">&lt;</span>/h2<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>标题3<span class="token operator">&lt;</span>/h3<span class="token operator">></span><span class="token operator">&lt;</span>h4<span class="token operator">></span>标题4<span class="token operator">&lt;</span>/h4<span class="token operator">></span><span class="token operator">&lt;</span>h5<span class="token operator">></span>标题5<span class="token operator">&lt;</span>/h5<span class="token operator">></span><span class="token operator">&lt;</span>h6<span class="token operator">></span>标题6<span class="token operator">&lt;</span>/h6<span class="token operator">></span></code></pre><h3 id="4、文本格式化，一些常用于设置文本字体的元素："><a href="#4、文本格式化，一些常用于设置文本字体的元素：" class="headerlink" title="4、文本格式化，一些常用于设置文本字体的元素："></a>4、文本格式化，一些常用于设置文本字体的元素：</h3><pre class=" language-bash"><code class="language-bash">         <span class="token operator">&lt;</span>b<span class="token operator">></span>定义粗体文本<span class="token operator">&lt;</span>/b<span class="token operator">></span><span class="token operator">&lt;</span>br /<span class="token operator">></span>         <span class="token operator">&lt;</span>i<span class="token operator">></span> 定义斜体文本 <span class="token operator">&lt;</span>/i<span class="token operator">></span><span class="token operator">&lt;</span>br /<span class="token operator">></span>         <span class="token operator">&lt;</span>del<span class="token operator">></span>定义删除文本<span class="token operator">&lt;</span>/del<span class="token operator">></span><span class="token operator">&lt;</span>br /<span class="token operator">></span>         <span class="token operator">&lt;</span>sup<span class="token operator">></span>定义上标字<span class="token operator">&lt;</span>/sup<span class="token operator">></span><span class="token operator">&lt;</span>br /<span class="token operator">></span>         <span class="token operator">&lt;</span>sub<span class="token operator">></span>定义下标字<span class="token operator">&lt;</span>/sub<span class="token operator">></span><span class="token operator">&lt;</span>br /<span class="token operator">></span></code></pre><h3 id="5、定义超链接"><a href="#5、定义超链接" class="headerlink" title="5、定义超链接"></a>5、定义超链接<a href="“URL”"></a></h3><p>a标签用来定义一条超链接，其中要有的是href属性，href的作用是指明超链接要链接到的网址。除了href属性，还有title属性表示链接的提示信息。target属性表示链接的打开方式，即当点击了链接，选择是在另一个页面打开还是本页面打开。其属性值包括_blank(新的空白页)self(当前页),top（当前页）。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>百度一下<span class="token operator">&lt;</span>/a<span class="token operator">></span> </code></pre><p>href的值可以是外部链接，也可以是内部文件，如.html文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span>“http://www.163.com”<span class="token operator">></span>外部链接<span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span>“about.html”<span class="token operator">></span>内部链接 <span class="token operator">&lt;</span>/a<span class="token operator">></span>href也可以链接到别的地址，如邮箱、电话、sms。<span class="token operator">&lt;</span>a href<span class="token operator">=</span>“1233456.qqcom”<span class="token operator">></span>邮件链接<span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span>“tel:电话号码”<span class="token operator">></span>拨打电话<span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"sms:139xxxxxxx"</span><span class="token operator">></span>发送短信<span class="token operator">&lt;</span>/a<span class="token operator">></span></code></pre><img src="https://images2015.cnblogs.com/blog/808020/201608/808020-20160805114041231-316044158.png" class="[class names]"><h3 id="6-锚点"><a href="#6-锚点" class="headerlink" title="6.锚点"></a>6.锚点</h3><p>有时我们在浏览网页时会发现，有些网页比较人性化，会有点击返回顶部的按键。这样的效果其实用锚点标签就能做到。锚点就是点击使用户跳到文档的某个部分。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#位置名"</span><span class="token operator">></span> <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>a name<span class="token operator">=</span><span class="token string">"位置名"</span><span class="token operator">></span> <span class="token operator">&lt;</span>/a<span class="token operator">></span> 如代码例子：<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#map"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span>/a<span class="token operator">></span> <span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">></span>代码代码<span class="token operator">&lt;</span>/p<span class="token operator">></span></code></pre><h3 id="7、图像img"><a href="#7、图像img" class="headerlink" title="7、图像img"></a>7、图像img</h3><p>如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/fenfjing.jpg"</span> width<span class="token operator">=</span><span class="token string">"100"</span> height<span class="token operator">=</span><span class="token string">"100"</span> alt<span class="token operator">=</span><span class="token string">"风景"</span> /<span class="token operator">></span></code></pre><h3 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h3><p>（1）、无序列表。</p><p>Html中列表也是常用的元素。无序列表用(ul)(li)(/li)(/ul)表示。</p><p>说明：</p><p>属性：    type</p><p>属性值：   列表前的符号</p><p> disc     实心原点   </p><p> circle　  符号为空心圆</p><p> square　　符号为方形</p><p>例子如下：</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>ul type<span class="token operator">=</span><span class="token string">"disc"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span> <span class="token operator">&lt;</span>/ul<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>ul type<span class="token operator">=</span><span class="token string">"circle"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span></code></pre><img src="https://images2015.cnblogs.com/blog/808020/201608/808020-20160805114211575-170728485.png" class="[class names]"> <pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>ul type<span class="token operator">=</span><span class="token string">"square"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>    <span class="token operator">&lt;</span>/ul<span class="token operator">></span></code></pre><p>（2）、有序列表</p><p>有序列表使用数字或字母系统来组织列表里包含的信息。有序列表可以使用数字(默认)、大写字母、小写字母、大写罗马数字和小写罗马数字排列项目。</p><p>说明：</p><p>属性               属性值                             说明</p><p>type     1、 a 、 A、i、I       用来设置项目前面的标记</p><p>start         数值                         排序的起点数值</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ol type<span class="token operator">=</span><span class="token string">"1"</span> start<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>/ol<span class="token operator">></span>         <span class="token operator">&lt;</span>ol type<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>/ol<span class="token operator">></span>         <span class="token operator">&lt;</span>ol type<span class="token operator">=</span><span class="token string">"A"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>/ol<span class="token operator">></span>         <span class="token operator">&lt;</span>ol type<span class="token operator">=</span><span class="token string">"i"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>/ol<span class="token operator">></span>         <span class="token operator">&lt;</span>ol type<span class="token operator">=</span><span class="token string">"I"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>苹果<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>香蕉<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>li<span class="token operator">></span>雪梨<span class="token operator">&lt;</span>/li<span class="token operator">></span>         <span class="token operator">&lt;</span>/ol<span class="token operator">></span></code></pre><p>（3）、定义列表</p><p>定义列表用来组织术语和它们的定义。任何信息如果包含多个术语和相对应的解释，都可以使用定义列表进行组织。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>dl<span class="token operator">></span><span class="token operator">&lt;</span>dt<span class="token operator">></span>爱好<span class="token operator">&lt;</span>/dt<span class="token operator">></span><span class="token operator">&lt;</span>dd<span class="token operator">></span>听歌<span class="token operator">&lt;</span>/dd<span class="token operator">></span><span class="token operator">&lt;</span>dt<span class="token operator">></span>爱好<span class="token operator">&lt;</span>/dt<span class="token operator">></span><span class="token operator">&lt;</span>dd<span class="token operator">></span>跑步 <span class="token operator">&lt;</span>/dd<span class="token operator">></span><span class="token operator">&lt;</span>dd<span class="token operator">></span>唱歌 <span class="token operator">&lt;</span>/dd<span class="token operator">></span><span class="token operator">&lt;</span>/dl<span class="token operator">></span></code></pre><img src="https://images2015.cnblogs.com/blog/808020/201608/808020-20160805114413747-31081520.png" class="[class names]"> <h3 id="9、-HTML-实体字符。"><a href="#9、-HTML-实体字符。" class="headerlink" title="9、 HTML 实体字符。"></a>9、 HTML 实体字符。</h3><p>在html中，有些特殊字符是需要用html语言表示出来的。一个字符实体包含三个部分：一个&amp;符，一个实体名或者一个实体号，最后一个分号（；）。如下所示：</p><ul><li>实体名是大小写敏感的。</li></ul><p>实体字符         字符实体</p><p>大于号 (&gt;)        &lsaquo; &amp;gt&rsaquo; ;</p><p>小于号 (&lt;)      &lsaquo;&amp;lt&rsaquo; ;</p><p>引号 (“)          &lsaquo;&amp;quot&rsaquo; ;</p><p>注册商标(®)       &lsaquo;&amp;reg&rsaquo; ;</p><p>版权(© )          &lsaquo;&amp;copy&rsaquo; ;</p><p>&lsaquo;&amp;copy&rsaquo;    ;     &lsaquo;&amp;amp&rsaquo;   ;</p><h3 id="10、-图像热区"><a href="#10、-图像热区" class="headerlink" title="10、 图像热区"></a>10、 图像热区</h3><p>平时我们在浏览网页时，当鼠标经过一张图片中的某个位置时，发现是可点击的。也就是说，我们点击这个部分，就会链接到别的地方。创建图像热区想要用<img>b标签把图片插入进来，然后使用<area>标签在刚才插入的图片里划分热区。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"URL"</span>  usemap<span class="token operator">=</span><span class="token string">"# map 名称"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>map name<span class="token operator">=</span><span class="token string">"map 名称"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>area shape<span class="token operator">=</span><span class="token string">"形状"</span> coords<span class="token operator">=</span><span class="token string">"坐标值"</span> href<span class="token operator">=</span><span class="token string">"URL"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/map<span class="token operator">></span></code></pre><p>Rect:矩形   左上角坐标与右下角坐标（x，y，x，y）</p><p>Circle:圆形  圆心坐标，半径  （x，y ，r）</p><p>Poly:多边形  各顶点的坐标   （x，y，x，y，x，y。。。）</p><p>说明：</p><p>URL :                图像的地址</p><p>usermap   :       表示要使用#后面的那个名字的&lsaquo;map&rsaquo; 标签来为图片划分热区</p><p>shape  :             热区形状(rect矩形、circle圆形、poly多边形 )</p><p>coords  :            形状的坐标值</p><p>注：usemap的值要与map的name值保持一致。坐标可以通过PS软件–菜单栏导航器—-信息—坐标值。</p><p>例子如下：热区范围为一个矩形</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"img/map.jpg"</span> usemap<span class="token operator">=</span><span class="token string">"#p1"</span>/<span class="token operator">></span> <span class="token operator">&lt;</span>map name<span class="token operator">=</span><span class="token string">"p1"</span> id<span class="token operator">=</span><span class="token string">"p1"</span><span class="token operator">></span>　　<span class="token operator">&lt;</span>area  shape<span class="token operator">=</span><span class="token string">"rect"</span> coords<span class="token operator">=</span><span class="token string">"500,120,550,150"</span> href<span class="token operator">=</span><span class="token string">"img/1.jpg"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/map<span class="token operator">></span></code></pre><p>在这里我设置了新疆为图像热区，热区范围为一个矩形。点击地图中的新疆，就会跳转到一张图片中。要注意的是要准确的写出热区的坐标，也就是热区的范围。其坐标值可以利用工具ps工具选取。</p><h3 id="11、-表格"><a href="#11、-表格" class="headerlink" title="11、 表格"></a>11、 表格</h3><p>表格由 &lsaquo;table&rsaquo;  标签以及一个或多个 tr、th或td 元素组成。</p><p>单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><p>基本结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>row 1, cell 1<span class="token operator">&lt;</span>/td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>row 1, cell 2<span class="token operator">&lt;</span>/td<span class="token operator">></span><span class="token operator">&lt;</span>/tr<span class="token operator">></span><span class="token operator">&lt;</span>tr<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>row 2, cell 1<span class="token operator">&lt;</span>/td<span class="token operator">></span><span class="token operator">&lt;</span>td<span class="token operator">></span>row 2, cell 2<span class="token operator">&lt;</span>/td<span class="token operator">></span><span class="token operator">&lt;</span>/tr<span class="token operator">></span><span class="token operator">&lt;</span>/table<span class="token operator">></span></code></pre><p>row 1, cell 1    row 1, cell 2<br>row 2, cell 1    row 2, cell 2<br>说明：</p><p>html有10个表格相关的标签。</p><p>&lsaquo;caption&rsaquo;         定义表格标题</p><p>&lsaquo;col&rsaquo; 　　　　　 定义列</p><p>&lsaquo;colgroup&rsaquo; 　　 定义表格列的分组</p><p>&lsaquo;table&rsaquo; 　　　   定义表格</p><p>&lsaquo;tbody&rsaquo; 　　  　定义表格主体</p><p>&lsaquo;td&rsaquo; 　　　　　 定义一个单元格</p><p>&lsaquo;tfoot&rsaquo; 　　　　定义表格的表注（底部）</p><p>&lsaquo;th&rsaquo; 　　　　 　定义表格表头</p><p>&lsaquo;thead&rsaquo; 　　 　定义表格的表头</p><p>&lsaquo;tr&rsaquo; 　　　　　 定义行</p><ul><li>通常很少使用&lsaquo;tbody&rsaquo; 、&lsaquo;thead&rsaquo; 、&lsaquo;tfoot&rsaquo; 标签，因为浏览器对它们的支持不好。</li></ul><p>属性说明：</p><p>属性                   值                                  说明</p><p>width                px、 %                           指定表格的宽度    </p><p>height               px、%                              表格的高度</p><p>border               px                                指定表格边框的宽度</p><p>cellpadding          px                            指定边框与内容之间的空白                           </p><p>cellspacing          px、 %                          指定单元格之间的空白                  </p><p>align            left、 right 、 center                指定表格的对齐方式                  </p><p>valign          top、 middle 、 bottom                 垂直排列方式</p><p>colspan                列数                            合并列单元格</p><p>rowspan               行数                             合并行单元格</p><p>bgcolor               颜色值                            表格背景色</p><p>background             图片                                表格背景图</p><p>bordercolor  　      　颜色值　                        表格边框颜色　　　　　</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>table align<span class="token operator">=</span><span class="token string">"center"</span> cellpadding<span class="token operator">=</span><span class="token string">"2"</span> cellspacing<span class="token operator">=</span><span class="token string">"3"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"300"</span> border<span class="token operator">=</span><span class="token string">"1"</span> <span class="token operator">></span>       <span class="token operator">&lt;</span>tr <span class="token operator">></span>            <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>/td<span class="token operator">></span>                                 <span class="token operator">&lt;</span>/tr<span class="token operator">></span>       <span class="token operator">&lt;</span>tr<span class="token operator">></span>            <span class="token operator">&lt;</span>td <span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>/td<span class="token operator">></span>            <span class="token operator">&lt;</span>td<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>/td<span class="token operator">></span>       <span class="token operator">&lt;</span>/tr<span class="token operator">></span>        <span class="token operator">&lt;</span>/table<span class="token operator">></span></code></pre><h3 id="12、-lsaquo-iframe-rsaquo-内嵌框架"><a href="#12、-lsaquo-iframe-rsaquo-内嵌框架" class="headerlink" title="12、 &lsaquo;iframe&rsaquo; 内嵌框架"></a>12、 &lsaquo;iframe&rsaquo; 内嵌框架</h3><p>属性                            属性值              说明</p><p>width                           px , %                 指定框架的宽度</p><p>height                         px , %                  指定框架的高度</p><p>scrolling                     yes,no,auto           是否显示滚动条</p><p>frameborder                  1, 0                   是否显示边框</p><p>语法：<br>&lsaquo;iframe src=”URL” name=”框架名”&rsaquo;  &lsaquo;/iframe&rsaquo;<br>如下： </p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"http://www.baidu.com"</span> name<span class="token operator">=</span><span class="token string">"baidu"</span> height<span class="token operator">=</span><span class="token string">"600"</span>width<span class="token operator">=</span><span class="token string">"600"</span><span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span></code></pre><p>scrolling属性在没写明的情况下，是根据设定的框架高度来确定是否需要滚动条的。</p><h3 id="13、-form-表单"><a href="#13、-form-表单" class="headerlink" title="13、 form 表单"></a>13、 form 表单</h3><p>html中表单的作用是很强大的。我们生活中经常要用到表单，如一些基本信息的填写。在网页中也是如此，我们免不了注册一些账号，此时用到的表单就比较多了。</p><p>表单主要负责获取用户填写的数据，并通过浏览器向服务器传送数据。</p><p>表单使用标签&lsaquo;form&rsaquo; 定义。</p><p>表单的基本结构：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"form1"</span> action<span class="token operator">=</span><span class="token string">"URL"</span> method<span class="token operator">=</span><span class="token string">"get|post"</span> target<span class="token operator">=</span><span class="token string">"文档显示方式"</span><span class="token operator">></span>   用户名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"uname"</span> /<span class="token operator">></span>   密 码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"passwd"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><p>说明：</p><p>属性                     说明</p><p>name                   表单的名称</p><p>action                   表单提交地址</p><p>method                表单数据提交的方式 （get:在url地址上面传送参数到服务器,post：在后台传送参数到服务器）</p><p>enctype                MIME类型              </p><p>target                   打开方式&lsaquo;blank:在一个新的窗口打开 self:在相同的框架中调入文档 top:把文档调入原来的最顶部的浏览器窗口中&rsaquo;<br>文本域：文本域通过&lsaquo;input type=”text”&rsaquo; 标签来设定，当用户要在表单中键入字母、数字等内容时，就会用到文本域。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>form<span class="token operator">></span>   First name: <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"firstname"</span><span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>   Last name: <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"lastname"</span><span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><p> 注意:表单本身并不可见。同时，在大多数浏览器中，文本域的缺省宽度是20个字符。</p><p> 浏览器显示如下：</p><p>First name: </p><p>Last name: </p><p>注意:表单本身并不可见。同时，在大多数浏览器中，文本域的缺省宽度是20个字符。</p><p>说明：</p><p>属性                  说明</p><p>type                input元素类型                          </p><p>name              input 元素的名称</p><p>value              input 元素的值</p><p>size                input 元素的宽度</p><p>readonly              是否只读</p><p>maxlength       输入字符的最大长度</p><p>disabled               是否禁用</p><p>密码字段</p><p>密码字段通过标签&lsaquo;input type=”password”&rsaquo; 来定义:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>form<span class="token operator">></span>Password: <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"pwd"</span><span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><p>浏览器显示效果如下：</p><p>Password: </p><p>属性                  说明</p><p>type                input元素类型                          </p><p>name              input 元素的名称</p><p>size                input 元素的宽度</p><p>maxlength      定义最多输入的字符数</p><p>注意:密码字段字符不会明文显示，而是以星号或圆点替代。</p><p>单选按钮</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span><span class="token operator">></span> 标签定义了表单单选框选项<span class="token operator">&lt;</span>form<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">></span>Male<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span>Female<span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><p>name属性：定义单选框的名称，要保证数据的准确获取，单选框都是以组为单位使用的，在同一组的单选按项要用同一个名称。</p><p>复选框</p><pre><code>&lt;input type=&quot;checkbox&quot;&gt; 定义了复选框. 用户需要从若干给定的选择中选取一个或若干选项&lt;form&gt;&lt;input type=&quot;checkbox&quot; name=&quot;song&quot; value=&quot;听歌&quot;&gt;听歌&lt;br&gt;&lt;input type=&quot;checkbox&quot; name=&quot;run&quot; value=&quot;跑步&quot;&gt; 跑步&lt;/form&gt;</code></pre><pre><code>&lt;input type=&quot;submit&quot;&gt; 定义了提交按钮.</code></pre><p>隐藏域</p><p>隐藏域用于在程序发送没有必要让用户看到特定值的时候使用。</p><pre><code>   &lt;input type=&quot;hidden&quot; name=&quot;uid&quot; value=&quot;10&quot;/&gt;</code></pre><p>上传文件   </p><pre><code>&lt;input type=“file” name=“photo” /&gt;</code></pre><p>注意：</p><p>利用这项功能时，在 form 标签中要指定method属性。要把method 指定为post, enctype属性指定为 multipart/form-data。</p><p>说明：</p><p> multiple     控制是否上传多文件</p><pre><code>&lt;input type=&quot;file&quot; name=&quot;photo&quot; multiple /&gt;&lt;input type=&quot;button&quot; value=&quot;请选择文件...&quot;/&gt;</code></pre><p>说明：</p><p>属性                   　　说明</p><p>name                　  元素的名称</p><p>rows                  　 指定文本框的高度</p><p>cols         　　　 　  指定文本框的宽度</p><p>例：</p><pre><code>&lt;textarea name=&quot;content&quot; rows=&quot;5&quot; cols=&quot;50&quot;&gt; &lt;/textarea&gt;</code></pre><p>注：此处的文本框宽高是由字符个数组成的。</p><p>简单下拉框：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span><span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"cars"</span><span class="token operator">></span><span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"volvo"</span><span class="token operator">></span>Volvo<span class="token operator">&lt;</span>/option<span class="token operator">></span><span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"saab"</span><span class="token operator">></span>Saab<span class="token operator">&lt;</span>/option<span class="token operator">></span><span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"fiat"</span><span class="token operator">></span>Fiat<span class="token operator">&lt;</span>/option<span class="token operator">></span><span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"audi"</span><span class="token operator">></span>Audi<span class="token operator">&lt;</span>/option<span class="token operator">></span><span class="token operator">&lt;</span>/select<span class="token operator">></span></code></pre><p>属性                            说明</p><p>name                           下拉列表框的名称        </p><p>size                           下拉列表框的显示行数</p><p>multiple                      是否多选</p><p>disabled                      是否禁用</p><p>selected                     设置默认选中的选项</p><p>value                           选项值</p><p> label</p><p>lable 标签的作用是将输入项或选项及其标签文字关联起来。</p><p>例：</p><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"1"</span> id<span class="token operator">=</span><span class="token string">"male"</span> /<span class="token operator">></span>         <span class="token operator">&lt;</span>label for<span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">></span>男<span class="token operator">&lt;</span>/label<span class="token operator">></span>         <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> value<span class="token operator">=</span><span class="token string">"0"</span> id<span class="token operator">=</span><span class="token string">"female"</span> /<span class="token operator">></span>         <span class="token operator">&lt;</span>label for<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">></span>女<span class="token operator">&lt;</span>/label<span class="token operator">></span></code></pre><p>optgroup(表单元素：下拉框分组)</p><pre class=" language-bash"><code class="language-bash">optgroup 元素用于组合选项<span class="token operator">&lt;</span>select name<span class="token operator">=</span><span class="token string">"city"</span> multiple<span class="token operator">></span>         <span class="token operator">&lt;</span>optgroup label<span class="token operator">=</span><span class="token string">"广东"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"1"</span><span class="token operator">></span>广州<span class="token operator">&lt;</span>/option<span class="token operator">></span>              <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"2"</span><span class="token operator">></span>深圳<span class="token operator">&lt;</span>/option<span class="token operator">></span>        <span class="token operator">&lt;</span>/optgroup<span class="token operator">></span>       <span class="token operator">&lt;</span>optgroup label<span class="token operator">=</span><span class="token string">"其他"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"3"</span><span class="token operator">></span>长沙<span class="token operator">&lt;</span>/option<span class="token operator">></span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">></span>香港<span class="token operator">&lt;</span>/option<span class="token operator">></span>            <span class="token operator">&lt;</span>/optgroup<span class="token operator">></span> <span class="token operator">&lt;</span>/select<span class="token operator">></span></code></pre><p>&lsaquo;datalist&rsaquo;</p><p> 标签定义选项列表。与 input 元素配合使用该元素，来定义 input 可能的值。datalist 及其选项不会被显示出来，它仅仅是合法的输入值列表。使用 input 元素的 list 属性来绑定 datalist。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>input list<span class="token operator">=</span><span class="token string">"cars"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>datalist id<span class="token operator">=</span><span class="token string">"cars"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"BMW"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"Ford"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"Volvo"</span><span class="token operator">></span><span class="token operator">&lt;</span>/datalist<span class="token operator">></span></code></pre><p> HTML5新标签</p><p>标签                   描述</p><p>&lsaquo;form&rsaquo;              定义供用户输入的表单</p><p>&lsaquo;input&rsaquo;              定义输入域</p><p>&lsaquo;textarea&rsaquo;          定义文本域 (一个多行的输入控件)</p><p>&lsaquo;label&rsaquo;            定义了&lsaquo;input&rsaquo;  元素的标签，一般为输入标题</p><p>&lsaquo;fieldset&rsaquo;          定义了一组相关的表单元素，并使用外框包含起来</p><p>&lsaquo;legend&rsaquo;           定义了 &lsaquo;fieldset&rsaquo;  元素的标题</p><p>&lsaquo;select&rsaquo;            定义了下拉选项列表</p><p>&lsaquo;optgroup&rsaquo;         定义选项组</p><p>&lsaquo;option&rsaquo;            定义下拉列表中的选项</p><p>&lsaquo;button&rsaquo;            定义一个点击按钮</p><p>&lsaquo;datalist&rsaquo; New      指定一个预先定义的输入控件选项列表</p><p>&lsaquo;keygen&rsaquo; New        定义了表单的密钥对生成器字段</p><p>&lsaquo;output&rsaquo; New        定义一个计算结果</p><p>HTML5的表单所有type类型</p><p>button              定义可点击的按钮（大多与 JavaScript 使用来启动脚本）</p><p>checkbox            定义复选框。</p><p>color               定义拾色器。</p><p>date                定义日期字段（带有 calendar 控件）</p><p>datetime            定义日期字段（带有 calendar 和 time 控件）</p><p>datetime-local      定义日期字段（带有 calendar 和 time 控件）</p><p>month               定义日期字段的月（带有 calendar 控件）</p><p>week                定义日期字段的周（带有 calendar 控件）</p><p>time                定义日期字段的时、分、秒（带有 time 控件）</p><p>email               定义用于 e-mail 地址的文本字段</p><p>file                定义输入字段和 “浏览…” 按钮，供文件上传</p><p>hidden              定义隐藏输入字段</p><p>image               定义图像作为提交按钮</p><p>number              定义带有 spinner 控件的数字字段</p><p>password            定义密码字段。字段中的字符会被遮蔽。</p><p>radio               定义单选按钮。</p><p>range               定义带有 slider 控件的数字字段。</p><p>reset               定义重置按钮。重置按钮会将所有表单字段重置为初始值。</p><p>search              定义用于搜索的文本字段。</p><p>submit              定义提交按钮。提交按钮向服务器发送数据。</p><p>tel                 定义用于电话号码的文本字段。</p><p>text                默认。定义单行输入字段，用户可在其中输入文本。默认是 20 个字符。</p><p>url                 定义用于 URL 的文本字段。</p><h3 id="14、音频"><a href="#14、音频" class="headerlink" title="14、音频"></a>14、音频</h3><p>基本格式：&lsaquo;audio src=”” controls&rsaquo;&lsaquo; audio&rsaquo; </p><p>不同浏览器会对音频的兼容性不同，所以最好是在属性type中指明其类型</p><p>属性说明：</p><p>autoplay        如果出现该属性，则视频在就绪后马上播放。</p><p>controls        如果出现该属性，则向用户显示控件，比如播放按钮。</p><p>loop            如果出现该属性，则当媒介文件完成播放后再次开始播放。</p><p>muted           规定视频的音频输出应该被静音。</p><p>poster          URL 规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。</p><p>preload         如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果 使用 “autoplay”，则忽略该属性。</p><p>src url         要播放的视频的 URL。</p><p>width           设置视频播放器的宽度。</p><p>height          设置视频播放器的高度。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>audio src<span class="token operator">=</span><span class="token string">"4.ogv"</span> width<span class="token operator">=</span><span class="token string">"300"</span> height<span class="token operator">=</span><span class="token string">"40"</span> controls<span class="token operator">></span><span class="token operator">&lt;</span>audio<span class="token operator">></span></code></pre><h3 id="15、视频"><a href="#15、视频" class="headerlink" title="15、视频　"></a>15、视频　</h3><p>基本格式：&lsaquo;video src=”4.ogv” controls &rsaquo;<br>&lsaquo; /viedo&rsaquo; 　</p><p>其属性与音频类同。</p><p>作者：ly婠婠<br><a href="http://www.cnblogs.com/46ly/" target="_blank" rel="noopener">出处</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript知识简单介绍</title>
      <link href="/2018/11/22/javascript-zhi-shi-jian-dan-jie-shao/"/>
      <url>/2018/11/22/javascript-zhi-shi-jian-dan-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript基本知识"><a href="#JavaScript基本知识" class="headerlink" title="JavaScript基本知识"></a>JavaScript基本知识</h2><p>JavaScript是一门独立的语言，像我们学习php,python等需要安装apache,python3.6，那我们学习JavaScript只需要我们电脑有一个浏览器即可，浏览器具有js解释器</p><h2 id="一、如何编写"><a href="#一、如何编写" class="headerlink" title="一、如何编写"></a>一、如何编写</h2><p>首先我们看看JavaScript代码存在的形式：</p><p>head中：</p><pre><code>第一种&lt;script&gt;        //javascript代码        alert(123);&lt;/script&gt;第二种&lt;script type=&quot;text/javascript&quot;&gt;        //javascript代码        alert(123);&lt;/script&gt;第三种，js代码保存在文件中&lt;script src=&quot;js文件路径&quot;&gt;&lt;/script&gt;</code></pre><p> 对于js代码，如果我们把它放在head里面，那么浏览器在解析的时候就会先执行js代码，然后才会显示html中的代码，这样，如果你引入的js代码的地址有问题，那么浏览器就会相应很长时间，然后才会显示body里面的内容，这样就给用户造成了很大的影响，所以我们一般把js代码的引入放在body的最下面</p><p> 最后才去加载js。</p><p>js的注释：</p><pre><code>单行注释：//多行注释：/*  代码  */</code></pre><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><p>JavaScript中变量，局部变量必须一个 var 开头，如果未使用var，则默认表示声明的是全局变量。</p><pre><code>&lt;script&gt;        //全局变量        name=&#39;alex&#39;        function func(){            //局部变量            var name=&#39;eric&#39;        }&lt;/script&gt;</code></pre><h2 id="三、基本的数据类型"><a href="#三、基本的数据类型" class="headerlink" title="三、基本的数据类型"></a>三、基本的数据类型</h2><p>JavaScript 中的数据类型分为原始类型和对象类型：<br>    <ul>原始类型<br>        <li>数字</li><br>        <li>字符串</li><br>        <li>布尔值</li><br>    </ul><br>    <ul>对象类型<br>        <li>数组</li><br>        <li>“字典”</li><br>        <li>…</li><br>    </ul></p><h3 id="1-数字（Number）"><a href="#1-数字（Number）" class="headerlink" title="1.数字（Number）"></a>1.数字（Number）</h3><p>在js中不区分整数值和浮点数值，所有数字均用浮点数值表示</p><p>转换：</p><ul><br><li>parseInt(..)    将某值转换成数字，不成功则返回NaN</li><br><li>parseFloat(..) 将某值转换成浮点数，不成功则返回NaN</li><br></ul><br>特殊值：<br><ul><br><li>NaN，非数字。可使用 isNaN(num) 来判断。</li><br><li>Infinity，无穷大。可使用 isFinite(num) 来判断。</li><br></ul><h3 id="2-字符串（String）"><a href="#2-字符串（String）" class="headerlink" title="2.字符串（String）"></a>2.字符串（String）</h3><p>字符串是由字符组成的数组，但在JavaScript中字符串是不可变的：可以访问字符串任意位置的文本</p><pre><code>a=&quot;xiaoming&quot;a.charAt(索引位置)                       // 获得某个位置的字符a.substring(起始位置，结束位置)            //截取a中的某段字符，不包含结束位置的字符a.length                                //获取当前字符串的长度</code></pre><p>首先先介绍：</p><p><b>console.log(1);</b><br>这个是在F12调试的console页面打印东西，我们可以在自己的网页的console放一些东西，比如百度，放的是招聘信息。</p><p>下面我们用我们上面的知识写一个 跑马灯 ：</p><p>先介绍一些知识：</p><ul><li>定时器：setInterval(‘要执行的代码’,间隔时间)</li></ul><pre><code>&lt;script&gt;        function f1(){            console.log(1);        }        //创建一个定时器        //setInterval(&quot;alert(123);&quot;,2000);        setInterval(&quot;f1();&quot;,2000);&lt;/script&gt;</code></pre><ul><br><li>这样就每隔2秒钟就在console上打印1</li><br><li>根据id选择器名称获得标签内容：tag=document.getElementById(“i1”);</li><br><li>获取标签内部内容：tag.innerText</li><br></ul><br>有了上面的知识，我们就可以做出一个 跑马灯了<br><br><br><code>bash&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;i1&quot;&gt;JavaScript学习实例&lt;/div&gt;    &lt;script&gt;        function func() {            //根据id获得指定的标签内容            var tag = document.getElementById(&quot;i1&quot;);            //获取标签内部的内容            var content = tag.innerText;            var f = content.charAt(0);            var l = content.substring(1,content.length);            var new_string = l+f;            tag.innerText = new_string;        }        setInterval(&quot;func()&quot;,1000);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code><br><br><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314154118446-1041447125.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314154118446-1041447125.png</a><br><br>字符串的其他函数：<br><br><code>basha = &#39;xiaoming&#39;;a.trim()                           　　//移除空白,比如a = &#39;  xiaoming    &#39;，返回的值就是xiaoming,没有了两边的空格a.trimLeft()a.trimRight)a.concat(value, ...)               　　//拼接,比如：a.concat(&#39;xixi&#39;);  返回的a的值就为xiaomingxixi  a.indexOf(substring,start)        　　 //子序列位置，比如a.indexOf(&#39;ao&#39;); 返回的就是 2a.lastIndexOf(substring,start)    　　 //子序列位置，倒着找a.slice(start, end)              　　  //切片a.toLowerCase()                 　　   //大写a.toUpperCase()                　　    //小写a.split(delimiter, limit)       　　   //分割 比如：a=&quot;xixixixi&quot;; a.split(&#39;i&#39;);返回的就是[&quot;x&quot;,&quot;x&quot;,&quot;x&quot;,&quot;&quot;]    a.split(&#39;i&#39;,2);返回的就是[&quot;x&quot;,&quot;x&quot;]a.search(regexp)                　　　 // 从头开始匹配，返回匹配成功的第一个位置(g无效)obj.match(regexp)                 　　 //全局搜索，如果正则中有g表示找到全部，否则只找到第一个。obj.replace(regexp, replacement)     　//替换，正则中有g则替换所有，否则只替换第一个匹配项，                                     $数字：匹配的第n个组内容；                                     $&amp;amp;：当前匹配的内容；                                     $`：位于匹配子串左侧的文本；                                     $&#39;：位于匹配子串右侧的文本                                     $$：直接量$符号</code><br><br>### 3.布尔类型（Boolean)<br><br><p>布尔类型仅包含真假，与Python不同的是其首字母小写,在python中表示真假用True和False，在JavaScript中表示真假用true和false。</p><br><br>### 4.数组<br><br><p>在python中[11,22,33]，这种叫做列表，但是在js中叫做数组。</p><br><br>常用函数：<br><br><code>basha = [11,22,33,44]a.length          //数组的大小a.push(ele)       //尾部追加元素 和python中的append一样a.pop()           //尾部获取一个元素a.unshift(ele)    //头部插入元素a.shift()         //头部移除元素a.splice(start, deleteCount, value, ...)  //插入、删除或替换数组的元素，起始位置，删除个数，要插入的值　　比如：a = [11,22,33,44];　　　　　a.splice(1,1,99);  那此时的a中就有[11,99,33,44]　　　　　a.splice(1,0,909); 那此时的a中就有[11,909,99,33,44]　　　　　a.splice(1,1);     那此时的a中就有[11,99,33,44]               a.slice( )        //切片,和字符串的substring差不多a.reverse( )      //反转a.join(sep)       //将数组元素连接起来以构建一个字符串a.concat(val,..)  //连接数组a.sort( )         //对数组元素进行排序</code><br><br><br>### 5.字典<br><br><br><p>js中的字典和python的差不多</p><br><br><code>a={&#39;k1&#39;:&#39;v1&#39;,&#39;k2&#39;:&#39;v2&#39;}取值的话：a[&#39;k1&#39;]=&#39;v1&#39;</code><br><br><br>### 6.序列化<br><br><p>在python中有json模块，把字典列表转换成字符串，再转换回来就用load()等。</p><br><br>在js中也有，比如我们在访问一个页面的时候，会返回数据 。返回的数据默认都是一个字符串，这个时候我们就需要对其进行处理<br><ul><br><li>JSON.stringify(obj)    序列化:把一个数组转换成字符串</li><br><li>JSON.parse(str)        反序列化：把字符串转换成数组</li><br></ul><pre><code>li = [11,22,33,77,5]s=JSON.stringify(li)        //s的结果为&quot;[11,22,33,77,5]&quot;new_li = JSON.parse(s)  //new_li的值为[11, 22, 33, 77, 5]</code></pre><h3 id="7-转义"><a href="#7-转义" class="headerlink" title="7.转义"></a>7.转义</h3><p>场景：我在地址框中输入这个中文搜索，然后我把这个地址复制下来的时候就变成这样子：<a href="https://www.baidu.com/s?wd=%E5%B0%8F%E6%98%8E，会把我们的中文转义为其他的" target="_blank" rel="noopener">https://www.baidu.com/s?wd=%E5%B0%8F%E6%98%8E，会把我们的中文转义为其他的</a></p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316011243975-82675763.png" class="[class names]"><ul><br><li>decodeURI( )                   URl中未转义的字符</li><br><li>decodeURIComponent( )   URI组件中的未转义字符</li><br><li>encodeURI( )                   URI中的转义字符</li><br><li>encodeURIComponent( )   转义URI组件中的字符</li><br><li>escape( )                         对字符串转义</li><br><li>unescape( )                     给转义字符串解码</li><br><li>URIError                         由URl的编码和解码方法抛出</li><br></ul><pre><code>url = &quot;https://www.baidu.com/s?wd=小明&quot;newurl=encodeURI(url)    &quot;https://www.baidu.com/s?wd=%E5%B0%8F%E6%98%8E&quot;decodeURI(newurl)    &quot;https://www.baidu.com/s?wd=小明&quot;newUrl = encodeURIComponent(url)　　&quot;https%3A%2F%2Fwww.baidu.com%2Fs%3Fwd%3D%E5%B0%8F%E6%98%8E&quot;    </code></pre><h3 id="8-eval"><a href="#8-eval" class="headerlink" title="8.eval"></a>8.eval</h3><p> 在python中有eval()函数和exec()函数</p><p>eval()只能执行表达式，并且可以得到返回值：var = eval(“1+1”),即使表达式是一个字符串，我们也能够得到运算结果。</p><p>exec()可以直接执行代码，但是没有返回值</p><p>在JavaScript中的eval是上面两个函数的合集，既可以执行表达式，也可以执行代码</p><h3 id="9-时间"><a href="#9-时间" class="headerlink" title="9.时间"></a>9.时间</h3><p>在python中，有time模块来获取当前时间，在JavaScript中需要有一个Date对象，比如</p><p>var d = new Date() </p><pre><code>var d =  new Date()    d的值：Fri Mar 16 2018 15:16:27 GMT+0800 (中国标准时间)d.getMinutes()    得到分钟:16n = d.getMinutes()+4    可以加上4分钟：20d.setMinutes(n)    设置时间：1521184827952dFri Mar 16 2018 15:20:27 GMT+0800 (中国标准时间)</code></pre><p>d.getXXXX获取时间</p><p>d.setXXXX设置时间</p><h3 id="10-js正则"><a href="#10-js正则" class="headerlink" title="10.js正则"></a>10.js正则</h3><p>在JavaScript我们定义一个字符串是rep=’aasdfasd’,但是定义正则表达式是用//即：rep=/\d+/</p><ul><br><li>/…/  用于定义正则表达式</li><br><li>/…/g 表示全局匹配</li><br><li>/…/i 表示不区分大小写</li><br><li>/…/m 表示多行匹配</li><br></ul><br>JS正则匹配时本身就是支持多行，此处多行匹配只是影响正则表达式^和$，m模式也会使用^$来匹配换行的内容<br><br><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180319180406291-778585251.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180319180406291-778585251.png</a><br><br>上述例子中，如果只用了g 那么匹配到了JavaScript之后，换行之后的java就匹配不到了；如果加了m，就能够匹配到<br><br><br><br>在JavaScript中正则匹配有两个函数<br><br>test -   判断字符串是否符合规定的zhengze,如果符合返回true,如果不符合返回false<br><br>exec -  获得匹配的数据，如果匹配到了，以数组的形式返回匹配到的数据<br><br>　　非全局模式:获取匹配结果数组，注意：第一个元素是第一个匹配的结果，后面元素是正则子匹配（正则内容分组匹配）<br><br>　　全局模式:需要反复调用exec方法，来一个一个获取结果，直到匹配获取结果为null表示获取完毕<br><br><br><br><br><br>## 四、循环<br><br>### for循环<br><br>1.循环时，循环的元素是索引<br><br><br><code>basha = [11,22,33,44]for(var item in a){　　console.log(a[item]);  }a = {&#39;k1&#39;:&#39;v1&#39;,&#39;k2&#39;,&#39;v2&#39;}for(var item in a){　　console.log(a[item]);}</code><br><br>2.设置变量i:<br><br><code>basha = [11,22,33,44]for(var i=0;i&lt;a.length;i++){}这种循环不适合字典的循环</code><br><br>## 五、条件语句<br><br><br><code>bashif(条件){}else if(条件){}else{}</code><br><br><br>判断条件：<br><ul><br><li>==      比较值相等</li><br><li>!=       不等于</li><br><li>===   比较值和类型相等</li><br><li>!===  不等于</li><br><li>||        或         python:or</li><br><li>&amp;&amp;      且　　 python:and</li><br></ul><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><h3 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h3><p>JavaScript中函数基本上可以分为一下三类：</p><p>普通函数：</p><pre><code>function func(){  alert(13);  }</code></pre><p>匿名函数：</p><pre><code>//我们的定时器，我们可以写成：setInterval(&quot;func&quot;,5000);//但是我们也可以写成匿名函数的样式：这里面的函数没有名字setInterval(function(){    console.log(123);},5000);//下面的也是一个匿名函数var func = function(arg){     return &quot;tony&quot;;}</code></pre><p>自执行函数：创建函数并且自动执行，两个（），一个（）里面写函数，一个（）中写需要执行这个函数所传入的参数：</p><pre><code>(function(arg){    console.log(arg);})(1)</code></pre><h3 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h3><p>其他的语言：以代码块作为作用域：</p><pre><code>public void Func(){      if(1==1){            string name=&quot;java&quot;;                }                  console.writeline(name);}Func()</code></pre><p>上述代码在运行的时候会报错，name这个变量只在if这个代码块中生效，如果出了这个代码块在调用就会报错</p><p>python：是以函数作为作用域的</p><pre><code>def func(){      if 1==1:           name=&#39;xiaoming&#39;      print(name)   }func()//在python中这个代码是可以运行的&lt;br&gt;print(name)//在python中这个代码是不可以运行的</code></pre><p>JavaScript：<br>a.是以函数作为作用域的</p><pre><code>function func(){     if(1==1){           var name=&quot;xiaoming&quot;;        }     console.log(name);  }func();//这个就可以执行</code></pre><p>b.函数的作用域在函数未被调用之前，已经被创建　　</p><p>c.函数的作用域存在作用域链，并且也是在被调用之前创建的</p><pre><code>xo = &#39;xiaoming&#39;function func(){　　var xo=&#39;eric&#39;    function inner(){    　　console.log(xo)　　}　　return inner;}var ret = func();//执行这个ret是inner的代码块:inner(){console.log(xo)}ret()//返回的是ericxo = &#39;xiaoming&#39;function func(){　　var xo=&#39;eric&#39;    function inner(){    　　console.log(xo)　　}　　var xo = &#39;tony&#39;;　　return inner;}var ret = func();ret()//返回的是tony,当解释器解析的时候里面的代码是不会执行的，只创建作用域。</code></pre><p> <a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316154914788-1112621431.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316154914788-1112621431.png</a></p><p>上面的代码，在没有执行的时候解释器编译的时候遇到func函数就生成一个作用域，里面又有一个inner函数，所以又生成了inner作用域，这两个是嵌套的关系，这个就是作用域链。</p><p>d.JavaScript函数内部局部变量提前声明</p><pre><code>function func(){    console.log(xxoo);}func();//程序直接报错function func(){    console.log(xxoo);    var xxoo = &#39;xiaoming&#39;;  }func();//这里输出的undefined，当解释器解析的时候会生成作用域链，同时会找出内部的局部变量，然后执行：var xxoo;但是没有赋值，那就是undefined。下面我们执行func()的时候，代码是从上到下执行的，运行console.log(xxoo)时，xxoo还没有被赋值，所以打印的就是undefined</code></pre><p> 例子：</p><p><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316230139169-1075541496.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316230139169-1075541496.png</a></p><p>所以上面的代码的结果依次为：</p><p><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316230422229-1398481031.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316230422229-1398481031.png</a></p><h3 id="3-JavaScript面向对象"><a href="#3-JavaScript面向对象" class="headerlink" title="3.JavaScript面向对象"></a>3.JavaScript面向对象</h3><p>对函数的一个变种：</p><p>之前我们创建函数是这样的：</p><pre><code>function foo(){  var xo=&#39;xiaoming&#39;;  }foo();</code></pre><p>那下面我们创建函数的时候用下面的方法：</p><pre><code>function Foo(n){     this.name=n;//这个this其实就是python中的self　　　this.sayName = function(){　　　　　console.log(this.name);　　　}}var obj1 = new Foo(&#39;we&#39;);//这样obj就创建了一个对象，对象中封装了一个nameobj1.nameobj1.sayName()var obj2 = new Foo(&#39;we&#39;);//这样obj就创建了一个对象，对象中封装了一个nameobj2.nameobj2.sayName()</code></pre><p> a.this代指对象（python self）</p><p>b.创建对象时，new函数（）</p><p><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316160815866-1566884061.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316160815866-1566884061.png</a></p><p>我们看，我们创建了obj1,2两个对象，当我们都执行.name和.sayName()函数的时候，sayName()相当于在每一个对象中都重复了定义了一次，这个就完全没有必要。所以我们应该把这个sayName()放在某一个地方，然后以后要用的时候就调用就可以了。</p><p>原型：</p><pre><code>function Foo(n){    this.name=n;}#Foo的原型Foo.prototype={　　&#39;sayName&#39;:function(){　　　　console.log(this.name);　　　　}}obj1 = new Foo(&#39;we&#39;);obj1.sayName()obj2 = new Foo(&#39;wwe&#39;);</code></pre><p> 这样我们在创建两个对象的时候，也就在Foo中只封装了一个name，如果在调用sayName函数的时候，会通过obj1先找到Foo这个类，然后通过这个类找到他的原型里的sayName函数，如果有就执行。</p><h2 id="七、DOM"><a href="#七、DOM" class="headerlink" title="七、DOM"></a>七、DOM</h2><p> 把html的标签转换成了文档对象，就可以依据JavaScript提供的功能找到当前页面的某些标签，从而可以改变标签的属性，内容等</p><h3 id="1-找到标签"><a href="#1-找到标签" class="headerlink" title="1.找到标签"></a>1.找到标签</h3><p>直接找：</p><ul><br><li>document.getElementById(‘i1’):&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;通过id选择器查找</li><br><li>document.get<span style="color: #ff0000">Elements</span>ByTagName(‘div’):&nbsp; &nbsp;通过标签名获取标签集合，获得的是多个元素，使用<span style="color: #ff0000">数组</span>组成的&nbsp;</li><br><li>document.get<span style="color: #ff0000">Elements</span>ByClassName(‘div’):根据class选择器获取标签集合</li><br><li>document.get<span style="color: #ff0000">Elements</span>ByName(‘user’):&nbsp; &nbsp; &nbsp; &nbsp;根据name属性获取标签集合</li><br></ul><br>间接找：<br><br>先找到一个标签，然后使用下面的方法可以找到其他的<br><br><br><code>bashparentNode          // 父节点childNodes          // 所有子节点firstChild          // 第一个子节点lastChild           // 最后一个子节点nextSibling         // 下一个兄弟节点previousSibling     // 上一个兄弟节点parentElement           // 父节点标签元素children                // 所有子标签firstElementChild       // 第一个子标签元素lastElementChild        // 最后一个子标签元素nextElementtSibling     // 下一个兄弟标签元素previousElementSibling  // 上一个兄弟标签元素</code><br><br><br>### 2.操作标签<br><br>文件内容操作：<br><ul><br><li>获取标签中的文本内容：标签.innerText&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 对标签内部文本进行重新赋值：标签.innerText=” “</li><br></ul><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;i1&quot;&gt;        我是i1    &lt;/div&gt;    &lt;a&gt;asdf&lt;/a&gt;    &lt;a&gt;5+9&lt;/a&gt;    &lt;a&gt;greg&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>现在我有div,3个a标签：在console上进行调试</p><pre><code>document.getElementById(&#39;i1&#39;)                //获得id为i1的标签内容　　&lt;div id=​&quot;i1&quot;&gt;​    　　    我是i1   　　 ​&lt;/div&gt;​document.getElementById(&#39;i1&#39;).innerText;    //获取i1标签中的文字　　&quot;我是i1&quot;document.getElementById(&#39;i1&#39;).innerText = &#39;新内容&#39;;   //修改i1标签中的文字　　&quot;新内容&quot;document.getElementsByTagName(&#39;a&#39;)                   //通过标签名a来获得标签集合　　HTMLCollection(3) [a, a, a]0: a1: a2: alength: 3__proto__: HTMLCollectiondocument.getElementsByTagName(&#39;a&#39;)[1]                //想要获得标签集合中的某一个，就要像去数组元素一样的去取　　&lt;a&gt;​5+9​&lt;/a&gt;​document.getElementsByTagName(&#39;a&#39;)[1].innerText = 666;　　666tags=document.getElementsByTagName(&#39;a&#39;);　　HTMLCollection(3) [a, a, a]for(var i=0;i&lt;tags.length;i++){tags[i].innerText=777;}  //用循环把超链接中的文字都修改了　　777</code></pre><ul><br><li>innerHTML&nbsp; :获取全部内容包括HTML</li><br><li>value :<br><ul><br><li>对input操作，获取当前标签中的值</li><br><li>对select操作，获取当前已经选中的value值（selectedIndex以数组的形式改变选中的选项）</li><br><li>对textarea操作，获取文本框的值</li><br></ul><br></li><br></ul><br><h4>样式操作：</h4><br><ul><br><li>className<br><ul><br><li>tag.classname= ‘’ 直接做整体操作，如果标签有class选择器就修改class选择器的名称，如果没有就添加class选择器</li><br><li>tag.classList.add(‘样式名’) 一个选择器可以有多个名字，所以就有了classList，使用add方法就可以添加样式名</li><br><li>tag.classList.remove(‘样式名’)删除一个样式名</li><br></ul><br></li><br><li>style</li><br></ul><pre><code>&lt;div id=&#39;i1&#39; class=&quot;c1 c2&quot; style=&quot;fon-size:16px;background-color:red;&quot;&gt;&lt;/div&gt;//我们用js来为div加样式的话就可以这样写：var obj = document.getElementById(&#39;i1&#39;);obj.style.fontSize=&#39;16px&#39;;obj.style.backgroundColor = &#39;red&#39;;obj.style.color=&#39;red&#39; </code></pre><p></p><h4>属性操作：</h4><p></p><ul><br><li>setAttribute(‘属性名’，‘值’)</li><br><li>removeAttribute(‘属性名’)</li><br><li>attributes:获取所有属性</li><br></ul><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;input type=&quot;button&quot; onclick=&quot;AddEle();&quot; value=&quot;+&quot;/&gt;    &lt;input type=&quot;button&quot; onclick=&quot;AddEle2();&quot; value=&quot;+&quot;/&gt;    &lt;div id=&quot;i1&quot;&gt;        &lt;p&gt;&lt;input type=&quot;text&quot; /&gt;&lt;/p&gt;    &lt;/div&gt;    &lt;script&gt;　　　　　//第一种创建标签的方式，以字符串的方式        function AddEle(){            var tag = &quot;&lt;p&gt;&lt;input type=&#39;text&#39;/&gt;&lt;/p&gt;&quot;;　　　　　　　//注意：第一个参数只能是&#39;beforeBegin&#39;、 &#39;afterBegin&#39;、 &#39;beforeEnd&#39;、 &#39;afterEnd&#39;　　　　　　　document.getElementById(&#39;i1&#39;).insertAdjacentHTML(&quot;beforeEnd&quot;,tag); }function AddEle2() {            var tag=document.createElement(&#39;input&#39;);            tag.setAttribute(&#39;type&#39;,&#39;text&#39;);            tag.style.fontSize=&#39;16px&#39;;            tag.style.color=&#39;red&#39;;            var p =document.createElement(&#39;p&#39;);            p.appendChild(tag);            document.getElementById(&#39;i1&#39;).appendChild(p);        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>提交表单<br>任何标签都可以通过DOM提交表单</p><p>document.getElementById(‘form表单的选择器名称’).submit();</p><pre><code>&lt;form id=&quot;f1&quot; action=&quot;http://www.baidu.com&quot;&gt;        &lt;input type=&quot;text&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;        &lt;a onclick=&quot;submitForm();&quot;&gt;提交&lt;/a&gt;    &lt;/form&gt;    &lt;script&gt;        function submitForm(){            document.getElementById(&#39;f1&#39;).submit();        }    &lt;/script&gt;</code></pre><p></p><h4>其他操作</h4><p></p><ul><br><li>console.log()&nbsp; 输出框</li><br><li>alert()&nbsp; 弹出框</li><br><li>confirm(信息)&nbsp; &nbsp;如果点击确定返回true,点击取消返回false</li><br><li>location.href&nbsp; 获取当前url</li><br><li>location.href = ‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">www.baidu.com&#39;</a>&nbsp; 重定向，跳转</li><br><li>location.reload()&nbsp; 重新加载，页面刷新</li><br><li>setInterval(‘func(){}’,second)&nbsp; 定时器&nbsp; ,var obj = setInterval(function(){},500);&nbsp; 定时器一直执行</li><br><li>clearInterval(obj)&nbsp; 清除定时器</li><br><li>setTimeout();&nbsp; 定时器，只执行一次。setTimeout(function(){},5000)；等5s之后才执行function</li><br><li>clearTimeout();&nbsp; 清楚setTimeout的定时器　</li><br></ul><h3 id="3-事件"><a href="#3-事件" class="headerlink" title="3.事件"></a>3.事件</h3><p>先看一道面试题：</p><p>　　行为 样式 结构     相分离的页面？</p><p>　　js     css    html    相互独立 </p><p>一般我们写HTML是下面这个样子的：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt; &lt;style&gt;        #test{            background-color: red;            width:300px;            height:400px;        } &lt;/style&gt;&lt;body&gt;    &lt;div id=&quot;test&quot; onclick=&quot;t1();&quot;&gt;asdf&lt;/div&gt;    &lt;script&gt;        function t1(){            console.log(&quot;asdf&quot;);        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>但是这个没有做到相分离，我们在html中还是有onclick，所以是不符合要求的，那我们可以稍微的改一下：</p><pre><code> &lt;style&gt;        #test{background-color: red;width:300px;height:400px;} &lt;/style&gt;&lt;body&gt;    &lt;div id=&quot;test&quot;&gt;asdf&lt;/div&gt;    &lt;script&gt;        var mydiv = document.getElementById(&#39;test&#39;);        mydiv.onclick = function(){            console.log(&quot;asdfa&quot;);        }    &lt;/script&gt;&lt;/body&gt;</code></pre><p>这样我们就把css,html,js分离了出来。</p><p>在看一个例子，一个表格，鼠标移动到哪行背景颜色变红色，移出来的时候恢复：</p><pre><code> &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=&quot;1&quot; width=&quot;300px;&quot;&gt;        &lt;tr&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;1&lt;/td&gt;            &lt;td&gt;1&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;2&lt;/td&gt;            &lt;td&gt;2&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td&gt;3&lt;/td&gt;            &lt;td&gt;3&lt;/td&gt;            &lt;td&gt;3&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;    &lt;script&gt;        var myTrs = document.getElementsByTagName(&quot;tr&quot;);        var len = myTrs.length;        for(var i=0;i&lt;len;i++){            myTrs[i].onmousemove = function(){                //this,谁调用这个函数，this就指向谁                this.style.backgroundColor=&#39;red&#39;;            }            myTrs[i].onmouseout = function(){                this.style.backgroundColor=&#39;&#39;;            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>需要注意的是，里面有一个this,表示的是当前触发事件的标签，而不能写成myTrs[i]，原因是：作用域的问题。在解析的时候，function里面的代码并不会去执行，在解析的时候循环就已经执行好了，相当于我们在看到的时候 i 已经等于3，那就获取不到想要的行了</p><p>再来看一道面试题：</p><p>　　div已经绑定了一个click事件，点击之后能够console出aaa，能不能再绑定一个click事件，在打印出aaa同时再打印出bbb?</p><pre><code>mydiv.addEventListener(&quot;click&quot;,function(){console.log(&#39;aaa&#39;)},false);mydiv.addEventListener(&quot;click&quot;,function(){console.log(&#39;bbb&#39;)},false);</code></pre><p>用到的是addEventListener，我们看一下第三个参数的含义：事件之捕捉和冒泡：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;style&gt;    #main{        width:300px;        height:400px;        background-color: pink;    }    #content{        width:150px;        height:200px;        background-color: green;    }&lt;/style&gt;&lt;body&gt;    &lt;div id=&quot;main&quot;&gt;        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        var mymain = document.getElementById(&#39;main&#39;);        var mycontent = document.getElementById(&#39;content&#39;);        mymain.addEventListener(&quot;click&quot;,function(){console.log(&quot;main&quot;)},false);        mycontent.addEventListener(&quot;click&quot;,function(){console.log(&quot;content&quot;)},false);    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>我们看看上面的例子，当我们是false的时候，我们点击content的div，显示的是：</p><p><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316183211859-1316554001.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316183211859-1316554001.png</a></p><p>当我们的参数是true的时候，我们显示的是：</p><p><a href="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316183211859-1316554001.png" target="_blank" rel="noopener">https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316183211859-1316554001.png</a></p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316183401359-2114176358.png" class="[class names]"><h2 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h2><h3 id="1-第一种绑定方式："><a href="#1-第一种绑定方式：" class="headerlink" title="1.第一种绑定方式："></a>1.第一种绑定方式：</h3><pre><code>&lt;input id=&quot;i1&quot; type=&quot;button&quot; onclick=&quot;ClickOn(this)&quot;&gt;function ClickOn(self){  //self当前点击的标签  }</code></pre><h3 id="2-第二种绑定方式："><a href="#2-第二种绑定方式：" class="headerlink" title="2.第二种绑定方式："></a>2.第二种绑定方式：</h3><pre><code>&lt;input id=&#39;i1&#39; type=&quot;button&quot;&gt;document.getElementById(&#39;i1&#39;).onclick = function(){  //this代指当前点击的标签  }</code></pre><ul><br><li>onmousemove：鼠标移入</li><br><li>onmouseout：鼠标移出</li><br><li>onclick:点击</li><br><li>onfocus:获得焦点</li><br><li>onblur：失去焦点</li><br><li>&nbsp;……</li><br></ul><p>下面我们来写一个模态对话框的实例：</p><pre><code> &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .hide{            display: none;        }        .c1{            position:fixed;            top:0;            left:0;            right:0;            bottom:0;            background-color: black;            opacity: 0.6;            z-index:9;        }        .c2{            width:500px;            height:300px;            background-color: white;            position:fixed;            left:50%;            top:50%;            margin-top:-150px;            margin-left:-250px;            z-index:10;        }    &lt;/style&gt;&lt;/head&gt;&lt;body style=&quot;margin:0;&quot;&gt;    &lt;div&gt;        &lt;table style=&quot;border:1px solid black;background-color:pink;text-align: center&quot;&gt;            &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;主机名&lt;/th&gt;                    &lt;th&gt;端口&lt;/th&gt;                &lt;/tr&gt;            &lt;/thead&gt;            &lt;tbody&gt;                &lt;tr&gt;                    &lt;td&gt;192.168.123.1&lt;/td&gt;                    &lt;td&gt;22&lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;192.168.123.2&lt;/td&gt;                    &lt;td&gt;23&lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;192.168.123.3&lt;/td&gt;                    &lt;td&gt;24&lt;/td&gt;                &lt;/tr&gt;            &lt;/tbody&gt;        &lt;/table&gt;        &lt;input type=&quot;button&quot; value=&quot;添加&quot; onclick=&quot;ShowModel();&quot;/&gt;    &lt;/div&gt;    &lt;!--遮罩层开始--&gt;    &lt;div id=&quot;i1&quot; class=&quot;c1 hide&quot;&gt;&lt;/div&gt;    &lt;!--遮罩层结束--&gt;    &lt;!--模态框开始--&gt;    &lt;div id=&quot;i2&quot; class=&quot;c2 hide&quot;&gt;        &lt;p&gt;&lt;input id=&quot;p1&quot; type=&quot;text&quot; /&gt;&lt;/p&gt;        &lt;p&gt;&lt;input id=&quot;p2&quot; type=&quot;text&quot; /&gt;&lt;/p&gt;        &lt;p&gt;            &lt;input type=&quot;button&quot; value=&quot;取消&quot; onclick=&quot;CancelModel();&quot; /&gt;            &lt;input type=&quot;button&quot; value=&quot;确定&quot; onclick=&quot;AcceptData();&quot;/&gt;        &lt;/p&gt;    &lt;/div&gt;    &lt;!--模态框结束--&gt;    &lt;script&gt;        function ShowModel() {            document.getElementById(&#39;i1&#39;).classList.remove(&#39;hide&#39;);            document.getElementById(&#39;i2&#39;).classList.remove(&#39;hide&#39;);        }        function CancelModel(){            document.getElementById(&#39;i1&#39;).classList.add(&#39;hide&#39;);            document.getElementById(&#39;i2&#39;).classList.add(&#39;hide&#39;);        }        function AcceptData(){            var p1 = document.getElementById(&#39;p1&#39;).value;            var p2 = document.getElementById(&#39;p2&#39;).value;            if(p1&amp;&amp;p2){                document.getElementById(&#39;i1&#39;).classList.add(&#39;hide&#39;);                document.getElementById(&#39;i2&#39;).classList.add(&#39;hide&#39;);            }else{                alert(&quot;请将数据填写完整&quot;);            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>我们还可以对表格实现全选反选和取消：</p><pre><code> &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body style=&quot;margin:0;&quot;&gt;    &lt;div&gt;        &lt;table style=&quot;border:1px solid black;background-color:pink;text-align: center&quot;&gt;            &lt;thead&gt;                &lt;tr&gt;                    &lt;th&gt;请选择&lt;/th&gt;                    &lt;th&gt;主机名&lt;/th&gt;                    &lt;th&gt;端口&lt;/th&gt;                &lt;/tr&gt;            &lt;/thead&gt;            &lt;tbody id=&quot;tb&quot;&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/td&gt;                    &lt;td&gt;192.168.123.1&lt;/td&gt;                    &lt;td&gt;22&lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/td&gt;                    &lt;td&gt;192.168.123.2&lt;/td&gt;                    &lt;td&gt;23&lt;/td&gt;                &lt;/tr&gt;                &lt;tr&gt;                    &lt;td&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/td&gt;                    &lt;td&gt;192.168.123.3&lt;/td&gt;                    &lt;td&gt;24&lt;/td&gt;                &lt;/tr&gt;            &lt;/tbody&gt;        &lt;/table&gt;        &lt;input type=&quot;button&quot; value=&quot;添加&quot; onclick=&quot;ShowModel();&quot;/&gt;        &lt;input type=&quot;button&quot; value=&quot;全选&quot; onclick=&quot;AllChoose();&quot;/&gt;        &lt;input type=&quot;button&quot; value=&quot;取消&quot; onclick=&quot;NoneChoose();&quot;/&gt;        &lt;input type=&quot;button&quot; value=&quot;反选&quot; onclick=&quot;ReserveChoose();&quot;/&gt;    &lt;/div&gt;    &lt;script&gt;        function AllChoose(){            var tbody = document.getElementById(&#39;tb&#39;);            //获取所有的tr            var tr_list = tbody.children;            for (var i=0;i&lt;tr_list.length;i++){                //循环所有的tr,current_tr                var current_tr = tr_list[i];                var checkbox = current_tr.children[0].children[0];                checkbox.checked=true;            }        }        function NoneChoose(){            var tbody = document.getElementById(&#39;tb&#39;);            //获取所有的tr            var tr_list = tbody.children;            for (var i=0;i&lt;tr_list.length;i++){                //循环所有的tr,current_tr                var current_tr = tr_list[i];                var checkbox = current_tr.children[0].children[0];                checkbox.checked=false;            }        }        function ReserveChoose(){            var tbody = document.getElementById(&#39;tb&#39;);            //获取所有的tr            var tr_list = tbody.children;            for (var i=0;i&lt;tr_list.length;i++){                //循环所有的tr,current_tr                var current_tr = tr_list[i];                var checkbox = current_tr.children[0].children[0];                checkbox.checked=!checkbox.checked;            }        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>这里的checkbox:</p><p>　　获取值：checkbox对象.checked                                 设置值：checkbox对象.checked=true　　　　</p><p>后台管理左侧菜单：实现点击菜单一，其他菜单都收起来。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .hide{            display: none;        }        .item .header{            height:35px;            background-color: #2459a2;            color:white;            line-height: 35px;        }        .item .header:hover{            background-color: blue;            color:orange;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;height:48px&quot;&gt;&lt;/div&gt;    &lt;div style=&quot;width:300px&quot;&gt;        &lt;div class=&quot;item&quot;&gt;            &lt;div id=&quot;i1&quot; class=&quot;header&quot; onclick=&quot;ChangeMenu(&#39;i1&#39;);&quot;&gt;菜单一&lt;/div&gt;            &lt;div class=&quot;content&quot;&gt;                &lt;div&gt;内容一&lt;/div&gt;                &lt;div&gt;内容二&lt;/div&gt;                &lt;div&gt;内容三&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;            &lt;div id=&quot;i2&quot; class=&quot;header&quot; onclick=&quot;ChangeMenu(&#39;i2&#39;);&quot;&gt;菜单二&lt;/div&gt;            &lt;div class=&quot;content hide&quot;&gt;                &lt;div&gt;内容一&lt;/div&gt;                &lt;div&gt;内容二&lt;/div&gt;                &lt;div&gt;内容三&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;            &lt;div id=&quot;i3&quot; class=&quot;header&quot; onclick=&quot;ChangeMenu(&#39;i3&#39;);&quot;&gt;菜单三&lt;/div&gt;            &lt;div class=&quot;content hide&quot;&gt;                &lt;div&gt;内容一&lt;/div&gt;                &lt;div&gt;内容二&lt;/div&gt;                &lt;div&gt;内容三&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;item&quot;&gt;            &lt;div id=&quot;i4&quot; class=&quot;header&quot; onclick=&quot;ChangeMenu(&#39;i4&#39;);&quot;&gt;菜单四&lt;/div&gt;            &lt;div class=&quot;content hide&quot;&gt;                &lt;div&gt;内容一&lt;/div&gt;                &lt;div&gt;内容二&lt;/div&gt;                &lt;div&gt;内容三&lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;script&gt;        function ChangeMenu(nid){            var current_header = document.getElementById(nid);            var item_list = current_header.parentElement.parentElement.children;            for(var i = 0;i &lt; item_list.length;i++){                var current_item = item_list[i];                current_item.children[1].classList.add(&#39;hide&#39;);            }            current_header.nextElementSibling.classList.remove(&#39;hide&#39;);        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 当然菜单的点击事件也可以做一下修改：我们之前点击菜单的时候，我们因为每个菜单都设置了id,所以在onclick事件中我们传入的参数是id名称，</p><p>如果不添加id,我们改成onclick=”ChangeMenu(this)”，即在onclick传入的是this参数。</p><p>然后我们就不用通过document获取id标签，而是直接用var current_header = nid;</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css基本知识</title>
      <link href="/2018/11/21/css-ji-ben-zhi-shi/"/>
      <url>/2018/11/21/css-ji-ben-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="css基本知识"><a href="#css基本知识" class="headerlink" title="css基本知识"></a>css基本知识</h2><p>我们先看一个小例子：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;background-color:#2459a2;height: 48px;&quot;&gt;1&lt;/div&gt;    &lt;div style=&quot;background-color:red;&quot;&gt;2&lt;/div&gt;    &lt;div style=&quot;background-color:green;&quot;&gt;3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre> <div style="background-color:#2459a2;height: 48px;">1</div><br> <div style="background-color:red;">2</div><br> <div style="background-color:green;">3</div><p>我们可以看到我们在div中加了style,里面有background-color，height等属性，这样就使的原本什么都没有的div添加了背景色高度等。</p><h2 id="css的编写"><a href="#css的编写" class="headerlink" title="css的编写"></a>css的编写</h2><p>在标签上设置style属性：width,height,background…….<br>写在head里面，写一个&lsaquo;style&rsaquo;标签中写样式：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token comment" spellcheck="true">#i1{</span>  background-color:red<span class="token punctuation">;</span>  height:48px      <span class="token punctuation">}</span><span class="token operator">&lt;</span>/style<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span></code></pre><p> 单独创建一个.css格式的文件，在.css文件中写入样式，在html文件中的head标签中引入该.css文件：<br>&lsaquo;link rel=”stylesheet” href=”common.css” /&rsaquo;</p><h2 id="选择器使用css"><a href="#选择器使用css" class="headerlink" title="选择器使用css"></a>选择器使用css</h2><p> 1.标签选择器：</p><pre><code>div{background-color:red; } &lt;div &gt; &lt;/div&gt;</code></pre><p>2.class选择器：</p><pre><code>.bd{background-color:red; } &lt;div class=&#39;bd&#39;&gt; &lt;/div&gt; </code></pre><p>3.id选择器：</p><pre><code>#idselect{background-color:red; } &lt;div id=&#39;idselect&#39; &gt; &lt;/div&gt;</code></pre><p>4.关联选择器（空格）</p><pre><code>#idselect p{background-color:red; } &lt;div id=&#39;idselect&#39; &gt; &lt;p&gt; &lt;/p&gt; &lt;/div&gt;</code></pre><p>5.组合选择器：（逗号）</p><pre><code>input,div,p{ background-color:red; } </code></pre><p>6.属性选择器：</p><pre><code>input[type=&#39;text&#39;]{ width:100px; height:200px; } </code></pre><p>css中的优先级</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .c1{            background-color: red;            color: white;        }        .c2{            font-size: 58px;            #color:black;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;c1 c2&quot;&gt;asdfas&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 上面我们设置了一个div有两个class名称，然后先设置了一个color:white,显示的效果如下：<br><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313170423687-1932802288.png" class="[class names]"></p><p>下面我们在.c2的css中把color:black的注释去掉，显示的效果如下：</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313170519958-1912902775.png" class="[class names]"><p>我们再在&rsaquo;div&rsaquo;标签中添加：style=”color:blue”，那么显示的效果如下：</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313170746969-1806163476.png" class="[class names]"><p>这就涉及到了css样式的优先级：（就近原则）</p><p>　　style—&gt;c2—-c1(这里c2,c1的优先级是看在css中谁的样式写在下面，如果上面head标签的style标签中两个位置互换，那么就是c1的优先级大于c2)</p><h2 id="常用的css中的样式"><a href="#常用的css中的样式" class="headerlink" title="常用的css中的样式"></a>常用的css中的样式</h2><p> 1.边框</p><p>默认4个边都加上：</p><p>　　 border:1px solid/dotted red (1像素，实线/虚线，红色)：</p><p>只加左边和右边：</p><p>　　border-left-right:1px solid/dotted red </p><p> 2.height,width,line-height,color,font-size,font-weight:</p><p>height,width:高度，宽度</p><p>　　height:48px;width:200px     or     height:48px;width:80%（可以用具体的值也可以用百分比）</p><p>text-align:center，水平方向居中</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313172436168-615590022.png" class="[class names]"><p>line-height行高：</p><p>　　如果我们想要把文字垂直居中就可以用这个属性（行高像素==height像素）,即height:48px，line-height:48px，则字体就居中了。</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313172743598-915330394.png" class="[class names]"><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313172752196-1584586787.png" class="[class names]"><p>font-size字体大小：font-size:12px;</p><p>font-weight字体的样式：100-900,bold(加粗),bolder（更粗），inherit,initial,lighter,normal,unset</p><p>color字体颜色；</p><p>3.float属性：浮动</p><p>如果我们写了2个div,那这2个div就会每个各占一行，如果我们想让一个div在左边占20%，一个div在右边80%，想要两个div在一行对接起来，那就需要用到float</p><p>首先看看我们不用float的效果：</p><pre><code>&lt;div style=&quot;background-color: red;width:20%;&quot;&gt;div1&lt;/div&gt;&lt;div style=&quot;background-color: green;width:80%&quot;&gt;div2&lt;/div&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313173811075-1960358527.png" class="[class names]"><p> 如果我们让这两个div都向左浮动：</p><pre><code>&lt;div style=&quot;background-color: red;width:20%;float:left;&quot;&gt;div1&lt;/div&gt;&lt;div style=&quot;background-color: green;width:80%;float:left&quot;&gt;div2&lt;/div&gt;</code></pre><p> 两个就重合在一起，并且一个站20%，一个占80%<br><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313174005712-565863141.png" class="[class names]"></p><p>如果我改成div1占20%往左浮动，div2占60%往右浮动：那么中间就会空出20%</p><pre><code>&lt;div style=&quot;background-color: red;width:20%;float:left;&quot;&gt;div1&lt;/div&gt;&lt;div style=&quot;background-color: green;width:60%;float:right&quot;&gt;div2&lt;/div&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313174212711-495932291.png" class="[class names]"><p> 现在我们写一个盒子，里面有一些div：</p><pre><code>&lt;div style=&quot;width: 300px; border: 1px solid red;&quot;&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;        &lt;div style=&quot;width:96px;height:30px;border:1px solid green;float:left&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p> 我们可以发现用了float我们就可以做到类似很多前端页面一块一块的样式，我们最外面的div的高度是随着里面小div不断的增多而增多的。</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313175552747-1722762029.png" class="[class names]"><p>但是有一个问题，我们可以看到上面有一个红色的线，他是外层div的边框，为什么父div的边框没有了呢，只有一个了呢？这个就是使用float之后会产生的问题。</p><p>解决方法：</p><p>在父div中的最后加上这么一段：<div style="clear:both;"></div></p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313175903532-1925960022.png" class="[class names]"><p>这样，父div的边框就显现了出来</p><p>4.display</p><p>首先我们看一段：</p><pre><code>&lt;div style=&quot;background-color: red;&quot;&gt;div1&lt;/div&gt;&lt;span style=&quot;background-color: green;&quot;&gt;span1&lt;/span&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313180454153-496478144.png" class="[class names]"><p>现在我们想要让块级标签变成一个行内标签：display:inline</p><pre><code>&lt;div style=&quot;background-color: red;display:inline;&quot;&gt;div1&lt;/div&gt;&lt;span style=&quot;background-color: green;&quot;&gt;span1&lt;/span&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313180620892-412934657.png" class="[class names]"><p>我们想要让span这个行内标签变成块级标签：display:block;<br><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313180735746-1839341791.png" class="[class names]"></p><hr><p>行内标签：无法设置高度，宽度，padding,margin</p><p>块级标签：可以设置高度，宽度，padding,margin</p><pre><code>&lt;span style=&quot;background-color: red;width:200px;height:48px;&quot;&gt;span1&lt;/span&gt;&lt;a style=&quot;background-color: red;&quot;&gt;chaolianjei&lt;/a&gt; 我们可以发现一点效果都没有</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313181138086-1758711987.png" class="[class names]"><p>display:inline-block;</p><p>　　具有inline，默认自己有多少占多少；</p><p>　　具有block，可以设置高度，宽度，padding,margin</p><pre><code>&lt;span style=&quot;background-color: red;width:200px;height:48px;display: inline-block;&quot;&gt;span1&lt;/span&gt;&lt;a style=&quot;background-color: red;&quot;&gt;chaolianjei&lt;/a&gt;</code></pre><p> 加了display:inline-block;之后，span就可以设置宽高了：</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313181452665-1096668336.png" class="[class names]"><p>display:none;让标签消失：<br><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313181726886-476302618.png" class="[class names]"><br><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180313181829167-173447817.png" class="[class names]"></p><p>5.padding margin(0 auto)内边距，外边距：</p><p>margin:</p><p>　　margin:0 auto;上下为0，左右居中</p><p>6.position:</p><p>fixed—-&gt;固定在页面的某个位置，滚轮滚动，位置也不会变<br>absolute—-&gt;绝对定位，单用它，滚轮滚动时，位置会改变，要和relative一起使用<br>relative<br>fixed：</p><p>我们先看一串代码：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;width: 50px;height:50px;background-color: black;color:white&quot;&gt;返回顶部&lt;/div&gt;    &lt;div style=&quot;height: 5000px;background-color: #dddddd&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314004713565-29421786.png" class="[class names]"><p>现在我们希望的是 “返回顶部” 这个div 固定在浏览器的右下角</p><pre><code>&lt;div style=&quot;width: 50px;height:50px;background-color: black;color:white;    position:fixed;bottom:20px;right:20px;&quot;    &gt;返回顶部&lt;/div&gt;</code></pre><p> 我在style中添加了</p><p>position:fixed;bottom:20px;right:20px;</p><p> 这样我们就把那个div固定在右下角了。</p><p>我们再看一个例子：有的网站，它的菜单栏是一直在浏览器的上面的，即使是滚动条滚动，头部的菜单栏也不会变，这个我们应该怎么做呢：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .pg-header{            height:48px;            background-color: black;            color: #dddddd;            position:fixed;            top:0;            right:0;            left: 0;        }        .pg-body{            background-color: #dddddd;            height:5000px;            margin-top:50px ;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;pg-header&quot;&gt;头部&lt;/div&gt;    &lt;div class=&quot;pg-body&quot;&gt;内容&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 其实只需要加上上面色的代码就可以了，下面的margin-top是为了让pg-body的能够往下来一点，显示出全部内容</p><p> relative+absolute:</p><p>我现在有3个div:</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;div1&lt;/div&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;div2&lt;/div&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;div3&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314011238569-1231745594.png" class="[class names]"><p>我想要在div1的左下角放一个黑色的小方框， div2的右下角放一个黑色的小方框，div3的左上角放一个黑色的小方框，应该怎么做 ：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;        div1        &lt;div style=&quot;width:50px;height:50px;background-color: black;position:absolute;left:0;bottom:0&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;        div2        &lt;div style=&quot;width:50px;height:50px;background-color: black;position:absolute;right:0;bottom:0&quot;&gt;&lt;/div&gt;    &lt;/div&gt;    &lt;div style=&quot;position: relative;height:200px;width:400px;border: 1px solid red;margin:0 auto;text-align: center;&quot;&gt;        div3        &lt;div style=&quot;width:50px;height:50px;background-color: black;position:absolute;left:0;top:0&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>只要relative 和 absolute 相配合，然后设置top,left,right,bottom的值就可以了，这个值可以是正数也可以是负数</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314011833776-1143210207.png" class="[class names]"><p>还有一个场景：我们点一个按钮，然后就会跳出一个小窗口，这个时候窗口以外的东西就没有办法进行操作了，如：我点击了大模态框，之后跳出了large model，但是灰色的地方是没有办法进行操作的</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314012405870-1499502095.png" class="[class names]"><p>这就是一个典型的三层模式：本身文本是一层，灰色的遮罩是一层，弹出的框是一层。那我们怎么实现这个呢？</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div style=&quot;width:400px;height:100px;background-color: white;        position: fixed;top:50%;left: 50%;        margin-top: -50px;margin-left:-200px;        z-index:10;&quot;&gt;&lt;/div&gt;    &lt;div style=&quot;position: fixed;background-color: black;top:0;bottom:0;right:0;left: 0; opacity: 0.6;z-index: 9;&quot;&gt;&lt;/div&gt;    &lt;div style=&quot;height:5000px;background-color: green;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 效果如图所示：下面有一个green的div，然后有一个black的div，只是设置了透明度，最上面有一个居中的白色div</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314013726824-96467572.png" class="[class names]"><p>分析：首先我们先说两个新的属性：</p><p>opcity:0.6;设置透明度，值为0-1</p><p>z-index:9，设置优先级，值越高优先级越大</p><p>我们先实现两个div，一个是绿色的，一个是黑色的。这个很简单。下面要再加上第三层。最关键的就是这上面两个属性，如果透明属性没有的话，在做两层的时候，黑色的就会把绿色彻底覆盖住，如果没有优先级属性的话，那么在做第三个div的时候就会不知道谁覆盖了谁。</p><p>这里我们还要记录的是居中方法：</p><p>position: fixed;top:50%;left: 50%;<br>margin-top: -50px;margin-left:-200px;<br> 设置50%，然后用margin返回宽高的一半，这样就能够让一个div居中显示</p><p> 7.overflow</p><p> 我们设置了一个div的宽度和高度，现在想要在这个div中放入一个图片，那图片有自己的高度和宽度。如果直接发放进去就会超出div的范围显示，那我们怎么办呢？</p><p>在style中加入overflow属性：</p><p>hidden：超出的部分隐藏<br>auto:超出的部分会给滚动条</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314015241693-1755946809.png" class="[class names]"><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314015337065-1802362552.png" class="[class names]"><p>8.hover</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        .pg-header{            position: fixed;            top:0;            right:0;            left:0;            height:48px;            background-color: #2459a2;            line-height:48px;        }        .pg-body{            margin-top:50px;        }        .w{            width:980px;            margin:0 auto;        }        .pg-header .menu{            display: inline-block;            padding:0 10px;            color:white;        }        /*当鼠标移动到当前标签的时候，以下css属性才会生效*/        .pg-header .menu:hover{            background-color: blue;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;pg-header&quot;&gt;        &lt;div class=&quot;w&quot;&gt;            &lt;a class=&quot;logo&quot;&gt;logo&lt;/a&gt;            &lt;a class=&quot;menu&quot;&gt;全部&lt;/a&gt;            &lt;a class=&quot;menu&quot;&gt;42区&lt;/a&gt;            &lt;a class=&quot;menu&quot;&gt;段子&lt;/a&gt;            &lt;a class=&quot;menu&quot;&gt;1024&lt;/a&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;pg-body&quot;&gt;        &lt;div class=&quot;w&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> hover当鼠标移动到超链接的时候，就会对hover的css里的属性生效</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180314020509725-543658825.png" class="[class names]"><p>9.background</p><p>background-image:url(‘image/4.jpg’)：背景是一个图片，如果这个div比图片的尺寸还要大的话，图片就会一直重复着放</p><p>　　应用场景：渐变色的背景，我们只需要一个很窄的图片，就可以利用这个属性，让整个背景都是这个渐变色的图片</p><p> background-repeat:no-repeat/repeat-x/repeat-y：改属性设置图片是否要重复，水平重复还是垂直重复</p><p>background-position:10px 10px 选取一张图上的某一个位置进行显示</p><p>　　应用场景：网站有的时候用一张图上存储了很多的图标，要用哪个图标就可以选哪个坐标</p><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><h3 id="一、主站布局："><a href="#一、主站布局：" class="headerlink" title="一、主站布局："></a>一、主站布局：</h3><pre><code>&lt;div class=&quot;pg-header&quot;&gt;        &lt;div style=&quot;width:980px;margin:0 auto;&quot;&gt;            内容自动居中        &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pg-content&quot;&gt;&lt;/div&gt;&lt;div class=&quot;pg-footer&quot;&gt;&lt;/div&gt;</code></pre><h3 id="二、后台管理布局"><a href="#二、后台管理布局" class="headerlink" title="二、后台管理布局"></a>二、后台管理布局</h3><p>同样都是三个部分，头部，中间内容，和尾部：</p><p>我们先看看中间的变化：<br>一类是中间内容的菜单和内容都不动，右边内容多的时候出现滚动条<br>我们用position:fixed做的话应该怎么做呢：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        body{            margin:0 auto;        }        .left{            float:left;        }        .right{            float:right;        }        .pg-header{            height:48px;            background-color: #2459a2;            color:white;        }        .pg-content .menu{            position: fixed;            top:48px;            left:0;            bottom:0;            width:200px;            background-color: #dddddd;        }        .pg-content .content{            position: fixed;            top:48px;            bottom: 0;            left:200px;            right:0;            background-color:purple;            overflow: auto;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;pg-header&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;pg-content&quot;&gt;        &lt;div class=&quot;menu left&quot;&gt;a&lt;/div&gt;        &lt;div class=&quot;content left&quot;&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;pg-footer&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 我们通过用position:fixed实现了菜单栏和内容栏的固定，然后当内容过多的时候我们就可以用overflow：auto实现添加一个滚动条，从而实现了布局</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180315005150184-1155522269.png" class="[class names]"><p>还有一类是中间内容部分如果多了，我们让左边的菜单跟随滚动条：</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180315005607953-367238078.png" class="[class names]"><pre><code> &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;style&gt;        body{            margin:0 auto;        }        .left{            float:left;        }        .right{            float:right;        }        .pg-header{            height:48px;            background-color: #2459a2;            color:white;        }        .pg-content .menu{            position: absolute;            top:48px;            left:0;            bottom:0;            width:200px;            background-color: #dddddd;        }        .pg-content .content{            position: absolute;            top:48px;            bottom: 0;            left:200px;            right:0;            min-width: 980px;            /*background-color:purple;*/            /*overflow: auto;*/        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;pg-header&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;pg-content&quot;&gt;        &lt;div class=&quot;menu left&quot;&gt;a&lt;/div&gt;        &lt;div class=&quot;content left&quot;&gt;            &lt;div style=&quot;background-color: purple&quot;&gt;                &lt;p style=&quot;margin: 0;&quot;&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;pg-footer&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>那和第一类的区别就在于，我们用的是position:absolute进行定位：</p><p>postion:absolute这个属性，可以在页面一开始生成的时候进行初始定位，但是随着你滚动滚动条的时候，定位就会改变，随着滚动条一起滚动，所以我们就可以利用这特点进行操作。</p><p>如果想要背景也跟着一起的话，可以在用一个div把内容包住，然后在这个div里面设置一个background-color，这样背景颜色就可以跟着内容一起增加。</p><p>如果我们要用absolute来实现第一类情况的话，我们也只要在第二类的基础上加上overflow:auto，就可以变回第一种情况了，非常的方便。</p><p>当然我们考虑一种情况，如果我们的浏览器不断的缩小，那个我们也要保证我们的内容要正常显示，这个时候就需要左右滚动条，我们就可以设置一下内容div的最小宽度min-width:980px，当小于这个宽度的时候就出现滚动条，就ok了</p><p>我们再看看头部的变化：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;fontawesome-free-5.0.8/web-fonts-with-css/css/fontawesome-all.min.css&quot;&gt;    &lt;style&gt;        body{            margin:0 auto;        }        .left{            float:left;        }        .right{            float:right;        }        .pg-header{            height:48px;            background-color: #2459a2;            color:white;            line-height: 48px;        }        .pg-header .logo{            width:200px;            background-color: cadetblue;            text-align: center;        }        .pg-header .user{            height:48px;            position: relative;            margin-right:60px;            padding:0 20px;        }        .pg-header .user:hover{            background-color: #204982;        }        .pg-header .user .a img{            height:40px;            width:40px;            margin-top: 4px;            border-radius:50%;        }        .pg-header .user .menu2{            position:absolute;            top:48px;            right:-10px;            background-color: white;            width:100px;            z-index:10;            display: none;            color:black;            text-align:center;        }        .pg-header .user .menu2 a{            display: block;            border-bottom: 1px solid black;            text-decoration:none;/*去掉超链接的下划线*/        }        .pg-header .user:hover .menu2{            display:block;        }         /* 未访问的链接 */        .pg-header .user .menu2 a:link{            color:black;        }        .pg-header .user .menu2 a:hover{            background-color: #dddddd;        }        .pg-header .icons{            padding:0 20px;        }        .pg-header .icons:hover{            background-color: #204982;        }        .pg-content .menu{            position: absolute;            top:48px;            left:0;            bottom:0;            width:200px;            background-color: #dddddd;        }        .pg-content .content{            position: absolute;            top:48px;            bottom: 0;            left:200px;            right:0;            min-width: 980px;            /*background-color:purple;*/            overflow: auto;            z-index:9;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;pg-header&quot;&gt;        &lt;div class=&quot;logo left&quot;&gt;logo图标&lt;/div&gt;        &lt;div class=&quot;user right&quot;&gt;            &lt;a class=&quot;a&quot; href=&quot;#&quot;&gt;                &lt;img src=&quot;1.jpg&quot;&gt;            &lt;/a&gt;            &lt;div class=&quot;menu2&quot;&gt;                &lt;a href=&quot;#&quot;&gt;我的资料&lt;/a&gt;                &lt;a href=&quot;#&quot;&gt;注销&lt;/a&gt;            &lt;/div&gt;        &lt;/div&gt;        &lt;div class=&quot;icons right&quot;&gt;            &lt;i class=&quot;far fa-envelope&quot;&gt;&lt;/i&gt;            &lt;span&gt;5&lt;/span&gt;        &lt;/div&gt;        &lt;div class=&quot;icons right&quot;&gt;            &lt;i class=&quot;far fa-bell&quot;&gt;&lt;/i&gt;            &lt;span&gt;3&lt;/span&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;pg-content&quot;&gt;        &lt;div class=&quot;menu left&quot;&gt;a&lt;/div&gt;        &lt;div class=&quot;content left&quot;&gt;            &lt;div style=&quot;background-color: purple&quot;&gt;                &lt;p style=&quot;margin: 0;&quot;&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;                &lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;&lt;p&gt;afasdf&lt;/p&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;pg-footer&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p> 显示的效果图就是如下效果：</p><img src="https://images2018.cnblogs.com/blog/1307091/201803/1307091-20180316003805580-347537174.png" class="[class names]"><p>需要知道的知识：</p><p>关于超链接的：</p><pre><code>a:link {color: #FF0000} /* 未访问的链接 */a:visited {color: #00FF00} /* 已访问的链接 */a:hover {color: #FF00FF} /* 鼠标移动到链接上 */a:active {color: #0000FF} /* 选定的链接 */text-decoration:none;/*去掉超链接的下划线*/</code></pre><p>关于边框的：</p><pre><code>border-radius:50%;/*把边框变成椭圆*/</code></pre><p>关于菜单栏的出现消失，不用js的做法：</p><pre><code>.pg-header .user .menu2{    display: none;}.pg-header .user:hover .menu2{    display:block;}/*这样做就能够实现，当鼠标放在头像上菜单栏自动出现，当鼠标移开的时候菜单栏自动隐藏*/ 关于菜单栏的图标的：</code></pre><p>到<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">https://fontawesome.com/icons</a>下载图标包，然后导入css文件，并在网站上寻找相关的图片的html，就可以显示了：</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;fontawesome-free-5.0.8/web-fonts-with-css/css/fontawesome-all.min.css&quot;&gt;/*导入css文件*/&lt;i class=&quot;far fa-envelope&quot;&gt;&lt;/i&gt;/*应用图标的html*/&lt;i class=&quot;far fa-bell&quot;&gt;&lt;/i&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>嵌入式学习 准备篇</title>
      <link href="/2018/11/21/qian-ru-shi-xue-xi-zhun-bei-pian/"/>
      <url>/2018/11/21/qian-ru-shi-xue-xi-zhun-bei-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是个开始，工欲善其事，必先利其器。</p><p>对于刚工作了一个月的我来说，我将来要走的路还很长。</p><p>三年前的自己选择的学校和专业，决定了今天的我。今天的选择决定了将来的我。</p><p>现在的工作和我自己之前的期望值还有有很大的差距，未来的路该怎么去走?</p><p>想了些许，答案就是要让自己变得有价值，关于如何提升自己，就现在所处的环境来说，学习一种技能是迫在眉睫，结合之前所学，选择嵌入式开发是思考许久的决定。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncHC1fBAjbkqficlibArwzZJiaKFibljibTldP61nhibtv9CM1L8ZjAIhLcPwg/640?wx_fmt=jpeg" class="[class names]"><h2 id="回归正题"><a href="#回归正题" class="headerlink" title="回归正题"></a>回归正题</h2><p>废话不多说，既然决定了开始学习嵌入式，就给自己规划一个学习路线，有目的的去学习才会清晰自己需要什么，该做什么。要明确自己的学习路线。看下面的嵌入式知识图谱！</p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncfOWowPvBw2Oq9AtD7rNtZibqUdDabt5WENzJTp2v8IYEfeicmn69eDhg/640?wx_fmt=png" class="[class names]"><p>是不是感觉一头雾水，一脸懵逼，我同样也有这样的感觉，当我第一眼看到它的时候，我甚至有点质疑自己的选择。但是万事开头难，要一点点攻破，先从基础的开始吧！比如我选择从相对简单的单片机开始。然后想学嵌入式的话其实就是比单片机复杂，其中的原理是相同的，熟悉了单片机，到时想要转学嵌入式的话，只要花时间好好学，肯定行的。</p><h2 id="单片机学习线路"><a href="#单片机学习线路" class="headerlink" title="单片机学习线路"></a>单片机学习线路</h2><p>先给自己定一个小目标，就从单片机开始吧。单片机学习起来其实不难，反而是一件比较有趣的事情，之所以新手感觉比较难是因为不知道该怎么入手，从哪里开始学起。单片机的学习无外乎两方面：</p><h3 id="一，电路-；"><a href="#一，电路-；" class="headerlink" title="一，电路 ；"></a>一，电路 ；</h3><p>先说电路，说到电路不得不提三本书。模电，数电，电路。可以说这三本书是学习电路的必经之路。学习单片机最好是要学习电路。</p><h3 id="二，编程语言。"><a href="#二，编程语言。" class="headerlink" title="二，编程语言。"></a>二，编程语言。</h3><p>接下来学编程语言，单片机的编程语言是结构化的C语言。C语言的学习也不是那么容易的，至少指针就够你迷糊一段时间的。还好大学期间学习过一学期，大概懂一点，算是入门了，学习C你可以先系统的学习一段时间，做一些练习，不用着急去将它应用到单片机上。</p><p>学习单片机需要动手，不是照着课本去死记硬背。学习单片机的第一个概念：确定好所学习的单片机具体型号。比如说，你要学习51单片机，你所确定的型号是STC89C52，这款单片机虽然比较老了，但是依然具有学习价值，淘宝有卖，还带教程。下面是我买的。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncwwlf4Nfd4tPBafTnDaC6PZtYRvWJwNG1qiaW6icT1n3XvuR9fAQMSbag/640?wx_fmt=jpeg" class="[class names]"><p>C语言我选择《C语言从入门到精通》.(王娣,韩旭 )。</p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5nc0omN5w4gibOuYF8MEZRQplHujMcvLicr84VzCjIVwaWDUNTsSvj0V7Lw/640?wx_fmt=jpeg" class="[class names]"><p>学习就先从简单的51单片机开始，把这块板子搞懂了，再去买块stm32的板子学习，精通后可以买块树莓派研究研究了，学习就是这样循序渐进的。</p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncD6iassbQCKYfxvEhEo3jsPjEUtzhznN3nwDsPib20xQLDGuJJdg6q8zQ/640?wx_fmt=png" class="[class names]"><h2 id="什么是单片机？"><a href="#什么是单片机？" class="headerlink" title="什么是单片机？"></a>什么是单片机？</h2><p>单片机（Microcontrollers）是一种集成电路芯片，是采用超大规模集成电路技术把具有数据处理能力的中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、A/D转换器等电路）集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。从上世纪80年代，由当时的4位、8位单片机，发展到现在的300M的高速单片机。</p><p>不是完成某一个逻辑功能的芯片,而是把一个计算机系统集成到一个芯片上。相当于一个微型的计算机，和计算机相比，单片机只缺少了I/O设备。概括的讲：一块芯片就成了一台计算机。 下面是我STC89c52的板子原理图。</p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncrBNQJUXSuLGX34DKnWzXmlPd1L91CgOJZwMOElX9RLK0Hx8ib2kj0Cg/640?wx_fmt=png" class="[class names]"><h2 id="学习单片机时候一定要看书"><a href="#学习单片机时候一定要看书" class="headerlink" title="学习单片机时候一定要看书"></a>学习单片机时候一定要看书</h2><p>不能总是看书，但是学习它首先必须得看书，那这不很矛盾。因为从书中你需要大概了解单片机各个功能寄存器（比如引脚控制寄存器、定时、中断、串口相关寄存器），控制单片机的核心是用程序去控制单片机的各个功能寄存器，给寄存器赋值二进制数据0或者1，这样一来对于引脚寄存器单片机可以根据二进制数据0和1输出高低电平控制外部设备，对于内部资源寄存器，单片机也通过二进制数据0和1使用单片机内部的功能。比如单片机引脚寄存器P1，语句P1=0xfe;（MOV P1，#0FEH）。</p><p>说明现在控制单片机P1口的第一个引脚输出低电平，其他引脚输出高电平。比如中断中断允许寄存器IE，语句IE=0x81;（MOV IE，#81H） 则说明控制中断打开总开关和外部中断0的子开关。至于看书，只需大概了解单片机各管脚、各个特殊功能寄存器都是干什么的？能实现什么样的功能？这个非常重要，这也许是看书的最主要的目的。第一次，第二次你可能看不明白，但这不要紧，因为还缺少实际的感观认识。</p><p>通过接下来的实验就可以非常感观的认识，在这个过程一定要花时间，学习程序不能硬背，但是学习寄存器一定要下功夫，理解他的功能所在。推荐一本书，就这一本就足够了，书名是《例说8051》有汇编语言和C语言版本的，非常强悍的一本书，但是我用一个五一放假的时间看完了这本书，看完后，觉得自己已经是单片机高手了。书中图文并茂，内容安排紧张有序，并非市面上很多说教的技术文档式的书，什么学完概念，学指令，学完指令学接口，学完接口才知道，原来学习单片机是学天书。</p><p>根据书本的安排循序渐进的看完前两章，然后一定是实践，一定是实践啊，这是非常关键的一步，在战场上上纸上谈兵的列子很多，在学习单片机也一样，很多相关专业的研究生甚至博士生直到毕业都不清楚单片机的IO口的分布，不知道分布谈何说开发呢？更有一些所谓的单片机高手只停留在编程，以为了买了一块高级学习板，练习完了里面所有的程序，感觉自己排第二没人敢拍第一，觉得下一步不知道如何学习单片机了。殊不知，他们中的很多人到最后单片机LED的电阻加多大都不清楚更不用说单片机的引脚分布，你说，如果这样去开发那不是“草菅人命”啊。不是纸上谈兵是什么啊。</p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncT3ObMYJUTcvFW5CzzAMvg2TJ6lUQbZvkicM15mNoSWJBKgczKLbVKpQ/640?wx_fmt=png" class="[class names]"><h2 id="学习单片机准备什么？"><a href="#学习单片机准备什么？" class="headerlink" title="学习单片机准备什么？"></a>学习单片机准备什么？</h2><p>学习单片机看书不够，实践也要从实际出发，现在的技术太模块了，什么都可以模块，模块的到最后，技术人员都成了只会用了，祖先的留下的知识，基础的知识该知道还是一定要知道的啊。 毕竟学习单片机的最终目的是开发，是通过创造智能控制的实物，体现自己的价值。</p><p>关于实践有两种方法可以选择一种方法：购买一块51单片机的实验板，不要求功能太的，对于初学者来功能非常多的那种板子，上面有很多东西你这辈子都用不着，更有实验板为了增加功能，降低成本，实验板上到处用的是贴片元件，双面布线，越复杂就越有水平，好像他们在设计的时候就想着，学习单片机只要根据我的提示下载程序就可以了，更有甚者将下载器和集成了实验板上。很多初学者学完单片机还认为，原来单片机不是一块芯片，是老教材上经常提到的使用已经不到的单板机。</p><p>我觉得初学单片机有这几个模块就够了，剩下的得自己去开发。流水灯、数码管、键盘、蜂鸣器、串口通讯、AD等这就差不多了。如果上面我提到的这些，你能熟练应用，那可以说对于单片机方面的硬件你已经入门了，剩下的就是自己练习设计电路，不断的积累经验。设计的电路的时候必须要学习下PCB板设计软件，毕竟现在做开发要产品批量化还得电脑辅助设计啊，手工的效率太低了。但是在学习的过程中建议自己动手焊接。</p><p>在焊接前一定要了解电路连接，网上随便搜索可以找到很多电路原理图，但是都不一定都能用，所以建议备一块面包板，有了它你在焊接电路前就可以先测试下了。如果在面包板上测试成功，后来的焊接你就志在必得了，如果失败，大不了重新再找一个。只要过了第一关，后面的路就好走，万事起步难。方法二：你身边如果有单片机入门者，动手能力比较强，请他帮忙，搭个简单的单片机最下电路，哪怕是控制一个LED工作的电路。</p><p>对于他们来说，做个单片机的最小系统板是轻而易举，而对于初学者可就难多，这中间的一层窗户纸破了就什么都简单了。因为只有对硬件了解了，才能熟练运用。只有知道程序是和下载到单片机内部的，才会清楚为什么要写单片机程序，这个动力来自于哪里，来至于心里有底。</p><p>单片机编程就是与单片机对话，如果不知道对方谁，有没有再听，你还会有说话的激情吗。当然了如果没有这样的人，还是那句话，在网上多找几个最小电路电路原理图，在面包板上焊接就可以了。当然了这个也不会的，那建议你一定要买一块实验板，以后单片机的学习实验及项目测试验都用的上。 </p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncxuc5P2NgN6ab7UzdwWoB8zIJ4UrYWHqNgnhIfFLCJESxIeJ0vbiaMgA/640?wx_fmt=png" class="[class names]"><h2 id="如何迈入单片机开发世界"><a href="#如何迈入单片机开发世界" class="headerlink" title="如何迈入单片机开发世界"></a>如何迈入单片机开发世界</h2><p>有了单片机实验板你就要多练习，最好是自己有台电脑，少下载几部电影，少网络游戏，把实验板和电脑连好，安装上必备的软件，下载参考程序，并修改参考程序，从最简单的交通灯实验做起，等你发现你能控制交通灯，并了解交通的软硬设计的时候你已经入门了，你会发现单片机是多么迷人的东西啊，这不是在学习知识，而是在提升自我的价值。用途那么广的交通的设计都不在话下了，你还会觉得你没有学到东西吗。还会觉得自己什么都不会吗？计算机编程、电子技术的专业知识都用上了啊。</p><p>当你编写的程序按你的意愿实现时，你比做什么事都开心，那种学习的收获感和成就感还有充实感是非常难得的。然后让数码管亮起来显示你所需要的数字。这两部分会了以后，你已经不能自拔了，你已经开始考虑你这辈子要走哪一行了。就这样学习，在写程序的时候你肯定会遇到很多问题，而这时你再去翻书找，这其中你会找你之前学过的编程的书，还有数电模电的书，你会发现原来之前学的知识还是有用的。遇到不懂再去找以前学过的书本查阅这才是 “温故而知新，可以为师矣”的大道理啊。</p><p>知识必须用于现实生活中，解决实际问题，用单片机设计个简易的家电定时器、红外遥控器什么，这样才能发挥它的作用，好好想想，上了这么多年大学，探索了那么久，犹豫徘徊，天天上课，在课堂上学到了什么？是不是为了期末60分的考试而忙碌，侥幸靠了90分，很高兴啊，在别人面前吹自己专业知识如何如何学习的好，殊不知，大学考试不像高中考试啊，那了奖学金又怎样。但是下学期开学回来一想，所学的知识已经忘记的一干二净。学到什么了？为什么要推荐学习单片机，因为单片机是工科生学的，集合计算机编程电子技术及多门控制语言为一体的学科，与其说学习是在学习单片机，不如说是在学习一个大学科。  </p><h2 id="学习单片机需要什么样的心态？"><a href="#学习单片机需要什么样的心态？" class="headerlink" title="学习单片机需要什么样的心态？"></a>学习单片机需要什么样的心态？</h2><p>1、首先要有信心，不要认为只有自己才这样，这是人性，每个人对新鲜事物都是有新鲜感的。刚开始点亮个小灯觉得很好玩，但是如果天天让你点亮个小灯，那还好玩么？但是你要想比别人成功，就要克服掉这个人性，在别人坚持不下去的时候，你要能够坚持下去，只有这样才有可能比别人做的更好，比别人更成功，所以你要有对成功的无限渴望。</p><p>2、找几个喜欢学习，同样喜欢单片机的人一起学。大学有这样一种现象，就是有的寝室所有的人都考上了研究生，有的全寝室同学都入党，有的全寝室同学一起去参加什么比赛，而有的寝室所有的同学都整天打游戏无所事事。因此应该给自己找几个学的好的人一起作伴，当大家一起，你的情绪不好的时候，别人的情绪好可以约束你的惰性，给予你鼓励，而且很多人在一起可以相互讨论。</p><p>3、没事多思考思考家里供你上学的父母，想想你自己的未来。你是想把青春就这么挥霍掉，还是想让青春绽放光彩，去改变你自己的世界。</p><p>4、抓住一切能参与实践的机会。以完成某一个项目为目的，完成项目的过程中，可以大幅提高自己的能力。项目越多，大幅提升自己能力的机会越多，战斗能力从实战中提升最快。</p><p>5、和论坛里的单片机学员一起学习。在这里，有同样水平的人相互讨论，或者加入一些技术讨论群，看看群里其他的小伙伴依然在努力学习，那你还好意思不继续学习么？</p><p>6.一旦确定要学习了，那就要和单片机谈恋爱，和技术结婚，终生伴他左右。技术已经成为我们生活的一部分，当别人以打牌为乐，而我们更喜欢追求解决一个技术问题带给我们的成就感。技术不仅仅是成为我们的谋生手段，养家糊口的本领，更是我们的朋友。</p><img src="https://mmbiz.qpic.cn/mmbiz_png/l2UMibTzEMJtH4IPXXTWphXdPCBicOc5ncc6gDTqeAH99fVuwLU4Lbw3GY6e4icyxDbOgHNaicbNaoAiaQ3qmfP7Lpw/640?wx_fmt=png" class="[class names]"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这就是我开始学习的一些想法，革命尚未成功，同志仍需努力，以后要走的路还远，我们要有最大的决心去克服遇到的问题，一路前行，未来是美好的，毕竟努力了可能会成功，不努力是一定不会成功的！</p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>琴瑟在御，莫不静好。</title>
      <link href="/2018/11/21/qin-se-zai-yu-mo-bu-jing-hao/"/>
      <url>/2018/11/21/qin-se-zai-yu-mo-bu-jing-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="琴瑟在御，莫不静好。"><a href="#琴瑟在御，莫不静好。" class="headerlink" title="琴瑟在御，莫不静好。"></a>琴瑟在御，莫不静好。</h2><p>愿你免为尘杂所侵<br>愿你获得永世的安宁<br>愿你修得一颗平等心<br>不贪爱不嗔恨<br>喜悦地活在当下</p><p>愿你三冬暖，愿你春不寒<br>愿你天黑有灯，下雨有伞<br>愿你一路上，有良人相伴</p><p>琴瑟在御，莫不静好。</p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1542778424644&di=ecea28793667fec786eb5af5cc25e7b4&imgtype=0&src=http%3A%2F%2Fimgsrc.baidu.com%2Fimgad%2Fpic%2Fitem%2F8435e5dde71190ef762527fbc41b9d16fdfa6033.jpg" class="[class names]" title="[50%] [500] [title text [alt text]]">]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo中添加本地图片和使用网络图片</title>
      <link href="/2018/11/21/hexo-zhong-tian-jia-ben-di-tu-pian-he-shi-yong-wang-luo-tu-pian/"/>
      <url>/2018/11/21/hexo-zhong-tian-jia-ben-di-tu-pian-he-shi-yong-wang-luo-tu-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="First-相对引用"><a href="#First-相对引用" class="headerlink" title="First 相对引用"></a>First 相对引用</h2><p>由于首页和主页相对图片位置不一致，网站首页和内页很可能仅有一处能正常加载。</p><p>1 调整程序配置文件_config.yml 里的post_asset_folder:这个选项设置为True</p><p>2 在source下创建/images文件夹，先把图片xx.jpg/png复制到这个文件夹</p><p>3 最后在xxxx.md中想引入图片时，只需要在xxxx.md中按照markdown的格式引入图片：</p><pre class=" language-bash"><code class="language-bash">1<span class="token operator">!</span><span class="token punctuation">[</span>想输入的提示名字，可不输入<span class="token punctuation">]</span><span class="token punctuation">(</span>/images/xx.jpg<span class="token punctuation">)</span></code></pre><h2 id="Second-图床"><a href="#Second-图床" class="headerlink" title="Second 图床"></a>Second 图床</h2><p>如SMMS图床无需注册<br>以下是测试：<br><img src="https://i.loli.net/2018/02/09/5a7d6a402e15e.jpg" class="[class names]" title="[50%] [50] [title text [alt text]]"><br>请备份Delete Link,必要时访问此链接删除图片。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/20/hello-world/"/>
      <url>/2018/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
